{"version":3,"sources":["Sidebar/sidebar.module.scss","user/Login/login.module.scss","user/Register/register.module.scss","Job/NewJobDialogBox/newJobDialogBox.module.scss","Job/Header/header.module.scss","shared/LoadingSpinner/loadingSpinner.module.scss","Content/content.module.scss","App/app.module.scss","Job/Table/table.module.scss","shared/SnackbarProvider/index.jsx","config.js","shared/LoadingSpinner/index.jsx","util/axios.js","company/api/getCompanyById.js","company/redux/actions/startFetchingCompany.js","company/redux/actions/stopFetchingCompany.js","company/redux/actions/setCurrentCompany.js","company/redux/actions/setCompanyError.js","company/redux/middlewares/handleSetCurrentCompany.js","company/api/searchCompanies.js","company/redux/actions/setIsSearchingCompanies.js","company/redux/actions/setSearchedCompanies.js","company/CompanySelectDialog/index.jsx","company/redux/middlewares/handleSearchCompanies.js","company/api/createCompany.js","company/redux/actions/setCompanyCreationError.js","company/redux/actions/setIsCreatingCompany.js","company/CreateCompanyDialog/index.jsx","company/redux/middlewares/handleCreateCompany.js","company/provider.jsx","App/AppProvider.jsx","App/redux/action/setNotification.js","App/redux/middleware/handleShowNotification.js","UserProvider/index.jsx","Header/UserWidget/index.jsx","Header/index.jsx","Sidebar/index.jsx","Job/redux/action/closeAddNewJobDialog.js","Job/api/getJobs.js","Job/api/updateJob.js","Job/redux/action/changeAddNewJobDialogState.js","Job/redux/action/setJobError.js","Job/redux/action/setJobs.js","Job/redux/action/startJobsFetching.js","Job/redux/action/stopJobsFetching.js","Job/redux/action/updateCurrentJob.js","Job/redux/middleware/handleUpdateJob.js","Job/api/addJob.js","Job/redux/middleware/handleAddJob.js","Job/NewJobDialogBox/index.jsx","Job/redux/action/openAddNewJobDialog.js","Job/redux/action/setSearchedJobs.js","Job/api/getSearchedJobs.js","Job/redux/action/setSearchingJobs.js","Job/Header/index.jsx","Job/redux/middleware/handleJobSearch.js","Job/redux/action/closeSingleJobDialog.js","Job/SingleJobDialog/index.jsx","WindowWidthProvider/index.jsx","Job/redux/action/openUpdateJobDialog.js","Job/redux/action/openSingleJobDialog.js","Job/api/deleteJob.js","Job/redux/middleware/handleDeleteJob.js","Job/redux/action/increareJobPage.js","Job/redux/middleware/handleNextPage.js","Job/Table/index.jsx","Job/redux/action/changeSingleJobDialogState.js","Job/index.jsx","Job/redux/middleware/handleSetJobs.js","Job/redux/middleware/updateAddNewJobDialogState.js","Job/redux/middleware/handleUpdateCurrentJob.js","Job/redux/middleware/updateSingleJobDialogState.js","Profile/index.jsx","Content/index.jsx","App/index.jsx","assets/vectors/logo.svg","user/Login/index.jsx","user/Register/index.jsx","route.jsx","MaterialThemeProvider/theme.js","MaterialThemeProvider/index.jsx","HeadProvider.jsx","Job/redux/reducer.js","company/redux/actions/setCompanies.js","company/redux/reducer.js","App/redux/action/clsoeSidebar.js","App/redux/action/openSidebar.js","App/redux/reducer.js","redux/rootReducer.js","redux/store.js","redux/index.jsx","Root.js","reportWebVitals.js","index.js","company/CompanySelectDialog/companySelectDialog.module.scss","company/CreateCompanyDialog/createCompanyDialog.module.scss"],"names":["module","exports","SnackbarContext","React","createContext","connect","state","message","APP","notification","props","children","Snackbar","open","autoHideDuration","LoadingSpinner","className","classes","wrapper","CircularProgress","http","axios","create","baseURL","process","interceptors","request","use","accessToken","localStorage","getItem","headers","authorization","response","setItem","split","getCompanyById","id","a","get","data","error","START_COMPANY_FETCHING","startFetchingCompany","type","STOP_COMPANY_FETCHING","stopFetchingCompany","SET_CURRENT_COMPANY","setCurrentCompany","company","payload","SET_COMPANY_ERROR","setCompanyError","handleSetCurrentCompany","dispatch","then","result","finally","searchCompanies","query","SET_SEARCHING_COMPANIES","setIsSearchingCompanies","SET_SEARCHED_COMPANIES","setSearchedCompanies","companies","mapDispatchToProps","handleSearchCompanies","COMPANY","isLoading","isSearchingCompanies","searchedCompanies","useState","textFieldRef","setTextFieldRef","handleSearchResultClose","handleCompanyClick","config","_id","ResultList","List","ListItem","disablePadding","ListItemButton","ListItemText","primary","map","name","onClick","_","main_wrapper","Card","variant","card_wrapper","Typography","TextField","onChange","e","value","currentTarget","label","size","ClickAwayListener","onClickAway","Popper","placement","Boolean","anchorEl","action_wrapper","Button","createCompany","password","post","setCompanyCreationError","SET_IS_CREATING_COMPANY","setIsCreatingCompany","handleCreateCompany","companyName","setCompanyName","companyPassword","setCompanyPassword","goBack","isCreateCompany","setIsCreateCompany","useEffect","currentCompany","currentCompanyId","isFetchingCompanies","AppContext","AppProvider","isSidebarOpen","setIsSidebarOpen","Provider","SET_NOTIFICATION","setNotification","handleShowNotification","setTimeout","UserContext","history","useHistory","user","setUser","setIsLoading","setError","push","catch","isUserLoading","setIsUserLoading","UserWidget","useContext","setAnchorEl","IconButton","event","onClose","MenuItem","username","removeItem","AppBar","position","color","Toolbar","edge","style","marginLeft","Sidebar","show","hidden","CLOSE_ADD_NEW_JOB_DIALOG","closeAddNewJobDialog","getJobs","page","limit","skip","options","params","updateJob","put","CHANGE_ADD_NEW_DIALOG_STATE","changeAddNewJobDialogState","SET_JOB_ERROR","setJobError","SET_JOBS","setJobs","START_JOBS_FETCHING","startFetchingJobs","STOP_JOBS_FETCHING","stopFetchingJobs","UPDATE_CURRENT_JOB","updateCurrentJob","handleUpdateJob","updatedJobDetails","getJobsResponse","addJob","handleAddJob","newJob","handleClose","currentJob","JOB","addNewDialogState","createJob","selected","isUpdate","customerName","setCustomerName","customerNameError","setCustomerNameError","serialNumber","setSerialNumber","model","setModel","modelError","setModelError","issues","setIssues","issueError","setIssueError","brand","setBrand","brandError","setBrandError","status","setStatus","amount","setAmount","amountError","setAmountError","moment","format","receivedDate","setReceivedDate","returnedDate","setReturnedDate","detailedDescription","setDetailedDescription","resetInputs","handleDialogClose","handleJobCreate","handleJobUpdate","Dialog","fullWidth","helperText","target","FormControl","InputLabel","Select","defaultValue","InputLabelProps","shrink","multiline","actionWrapper","disabled","OPEN_ADD_NEW_JOB_DIALOG","openAddNewJobDialog","SET_SEARCHED_JOBS","setSearchedJobs","jobs","getSearchedJobs","q","SET_JOBS_SEARCHING","setSearchingJobs","handleJobSearch","setJobErrors","addNew","display","addNewBtn","component","placeholder","CLOSE_SINGLE_JOB_DIALOG","closeSingleJobDialog","singleJobDialogState","job","Box","padding","gutterBottom","WindowWidthContext","WindowWidthProvider","width","setWidth","handleWindowResize","window","innerWidth","addEventListener","removeEventListener","OPEN_UPDATE_JOB_DIALOG","openUpdateJobDialog","OPEN_SINGLE_JOB_DIALOG","openSingleJobDialog","deleteJob","delete","handleDeleteJob","INCREASE_JOB_PAGE","increaseJobPage","currentPage","handleNextPage","JobTable","currentRowEl","selectedRow","scrollElement","createRef","handleOptionClick","bind","handleView","handleUpdate","handleDelete","handleOnScrollEnd","scrollObserver","this","current","IntersectionObserver","entries","threshold","observe","entry","isIntersecting","setState","viewSingleJob","viewUpdateDialog","context","TableContainer","Table","TableHead","TableRow","TableCell","cell","th","TableBody","searchedJobs","length","td","scope","opt_cell","ref","el","loadingWrapper","keepMounted","Component","contextType","isSearching","isSearchingJobs","isFetchingJobs","SINGLE_JOB_DIALOG_STATE","changeSingleJobDialogState","handleSetJobs","updateAddNewJobDialogState","handleUpdateCurrentJob","updateSingleJobDialogState","Profile","Content","exact","path","Job","App","content_wrapper","setUsername","setPassword","brand_wrapper","src","logo","alt","Paper","Register","notify","firstName","setFirstName","firstNameError","setFirstNameError","lastName","setLastName","lastNameError","setLastNameError","usernameError","setUsernameError","passwordError","setPasswordError","confirmPassword","setConfirmPassword","confirmPasswordError","setConfirmPasswordError","checkPasswordMatch","onBlur","MainRouter","Login","createTheme","typography","fontFamily","join","palette","main","blue","secondary","MaterialThemeProvider","ThemeProvider","theme","CssBaseline","HeadProvider","initialState","jobReducer","action","SET_COMPANY","isCreatingCompany","companyCreationError","companyReducer","actions","CLOSE_SIDEBAR","OPEN_SIDEBAR","sideBarIsOpen","AppReducer","rootReducer","combineReducers","logger","createLogger","level","middlewares","thunk","createStore","applyMiddleware","ReduxProvider","store","Root","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,KAAO,wB,oBCA7FD,EAAOC,QAAU,CAAC,aAAe,4BAA4B,QAAU,uBAAuB,cAAgB,+B,oBCA9GD,EAAOC,QAAU,CAAC,aAAe,+BAA+B,QAAU,0BAA0B,cAAgB,kC,oBCApHD,EAAOC,QAAU,CAAC,aAAe,sCAAsC,cAAgB,yC,oBCAvFD,EAAOC,QAAU,CAAC,QAAU,wBAAwB,UAAY,4B,oBCAhED,EAAOC,QAAU,CAAC,QAAU,kC,oBCA5BD,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,gBAAkB,+B,yCCApCD,EAAOC,QAAU,CAAC,QAAU,uBAAuB,KAAO,oBAAoB,GAAK,kBAAkB,GAAK,kBAAkB,SAAW,wBAAwB,eAAiB,gC,oICGnKC,EAAkBC,IAAMC,cAAc,IAiBpCC,eADS,SAAAC,GAAK,MAAK,CAAEC,QAASD,EAAME,IAAIC,gBACxCJ,EAhBU,SAACK,GAMtB,OACI,qCAEKA,EAAMC,SACP,cAACC,EAAA,EAAD,CAAUC,OAAQH,EAAMH,QAASO,iBAAkB,IAAMP,QAASG,EAAMH,gB,+BCfrE,EACY,kB,2BCQZQ,EAPQ,WACnB,OACI,qBAAKC,UAAS,UAAKC,IAAQC,SAA3B,SACI,cAACC,EAAA,EAAD,O,6ICJNC,E,OAAOC,EAAMC,OAAO,CAAEC,QAASC,wCAErCJ,EAAKK,aAAaC,QAAQC,KAAI,SAAAD,GAC1B,IAAIE,EAAcC,aAAaC,QAAQ,6BAEvC,OADIF,IAAaF,EAAQK,QAAQC,cAAhB,iBAA0CJ,IACpDF,KAEXN,EAAKK,aAAaQ,SAASN,KAAI,SAAAM,GAC3B,IAAIL,EAAcK,EAASF,QAAT,cAElB,OADIH,GAAaC,aAAaK,QAAQ,4BAA6BN,EAAYO,MAAM,KAAK,IACnFF,KAGIb,QCHAgB,EAVK,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,+EAEMlB,EAAKmB,IAAL,mBAAqBF,IAF3B,qBAETG,EAFS,EAETA,MACGC,MAHM,yCAGQ,CAAEA,MAAOD,EAAKC,QAHtB,gCAIRD,GAJQ,2DAMR,CAAEC,MAAO,KAAElC,UANH,0DAAH,sDCDPmC,EAAyB,yBAEvBC,EADe,iBAAO,CAAEC,KAAMF,ICAhCG,EAAwB,wBAEtBC,EADa,iBAAO,CAAEF,KAAMC,ICD9BE,EAAsB,sBAEpBC,EADW,SAACC,GAAD,MAAc,CAAEL,KAAMG,EAAqBG,QAASD,ICDjEE,EAAoB,oBAElBC,EADS,SAACX,GAAD,MAAY,CAAEG,KAAMO,EAAmBD,QAAST,ICiBzDY,EAbiB,SAAAhB,GAAE,OAAI,SAAAiB,GAClCA,EAASX,KACTP,EAAeC,GACdkB,MAAK,SAAAtB,GACE,IAAMQ,EAAUR,EAAVQ,MACN,OAAkBa,EAAdb,EAAuBW,EAAgBX,GAC3BO,EAAkBf,EAASuB,YAE9CC,SAAQ,WACLH,EAASR,UCJNY,EAVM,uCAAG,WAAOC,GAAP,iBAAArB,EAAA,+EAEKlB,EAAKmB,IAAL,4BAA8BoB,IAFnC,qBAEVnB,EAFU,EAEVA,MACGC,MAHO,yCAGO,CAAEA,MAAOD,EAAKC,QAHrB,gCAITD,GAJS,2DAMT,CAAEC,MAAO,KAAElC,UANF,0DAAH,sDCDRqD,EAA0B,0BAExBC,EADiB,SAAAvD,GAAK,MAAK,CAAEsC,KAAMgB,EAAyBV,QAAS5C,ICDvEwD,EAAyB,yBAEvBC,EADc,SAACC,GAAD,MAAgB,CAAEpB,KAAMkB,EAAwBZ,QAASc,IC0EhFC,GAAqB,CAAEZ,0BAAyBa,sBCtExB,SAAAP,GAAK,8CAAI,WAAML,GAAN,eAAAhB,EAAA,6DACnCgB,EAASO,GAAwB,IADE,SAEdH,EAAgBC,GAFF,QAE/B1B,EAF+B,QAGtBQ,OAAOa,EAASF,EAAgBnB,EAASQ,QAClDR,EAASuB,QAAQF,EAASS,EAAqB9B,EAASuB,SAC5DF,EAASO,GAAwB,IALE,2CAAJ,wDDuEpBxD,gBAFS,SAAAC,GAAK,MAAK,CAAE0D,UAAW1D,EAAM6D,QAAQH,UAAWI,UAAW9D,EAAM6D,QAAQE,qBAAsBC,kBAAmBhE,EAAM6D,QAAQG,qBAEhHL,GAAzB5D,EA3DgB,SAACK,GAE5B,MAAwCP,IAAMoE,UAAS,GAAvD,mBAAOC,EAAP,KAAqBC,EAArB,KACMC,EAA0B,kBAAMD,GAAgB,IAOhDE,EAAqB,SAAC1B,GACxBpB,aAAaK,QAAQ0C,EAA+B3B,EAAQ4B,KAC5DH,IACAhE,EAAM2C,wBAAwBJ,EAAQ4B,MAEpCC,EAAa,SAACpE,GAChB,OACI,eAACqE,EAAA,EAAD,WACKrE,EAAM0D,WAAa,cAACY,EAAA,EAAD,CAA4BC,gBAAc,EAA1C,SAA2C,cAACC,EAAA,EAAD,UAAgB,cAACC,EAAA,EAAD,CAAcC,QAAQ,oBAAlE,aAE/B1E,EAAM4D,kBAAkBe,KAAI,SAAApC,GACxB,OACI,cAAC+B,EAAA,EAAD,CAA4BC,gBAAc,EAA1C,SACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAcC,QAASnC,EAAQqC,KAAMC,QAAS,SAACC,GAAD,OAAOb,EAAmB1B,SAFjEA,EAAQ4B,YAW/C,OACI,mCACI,qBAAK7D,UAAS,UAAKC,IAAQwE,cAA3B,SACI,eAACC,EAAA,EAAD,CAAMC,QAAQ,WAAW3E,UAAS,UAAKC,IAAQ2E,aAAb,SAAlC,UACI,cAACC,EAAA,EAAD,CAAYF,QAAQ,KAApB,4BACA,cAACE,EAAA,EAAD,CAAYF,QAAQ,WAApB,gHACA,cAACG,EAAA,EAAD,CAAWC,SAnCC,SAACC,GACzB,IAAIC,EAAQD,EAAEE,cAAcD,MAE5BvF,EAAMwD,sBAAsB+B,GACxBA,GAAOxB,EAAgBuB,EAAEE,gBA+ByBC,MAAM,iBAAiBR,QAAQ,WAAWS,KAAK,UAEzF,cAACC,EAAA,EAAD,CAAmBC,YAAa5B,EAAhC,SACI,cAAC6B,EAAA,EAAD,CAAQC,UAAU,eAAe3F,KAAM4F,QAAQjC,GAAekC,SAAUlC,EAAxE,SACI,cAACkB,EAAA,EAAD,UACI,cAACZ,EAAD,CAAYV,UAAW1D,EAAM0D,UAAWE,kBAAmB5D,EAAM4D,0BAI7E,sBAAKtD,UAAS,UAAKC,IAAQ0F,gBAA3B,UACI,cAACC,EAAA,EAAD,CAAQrB,QAAS7E,EAAMmG,cAAvB,oBACA,cAACD,EAAA,EAAD,CAAQjB,QAAQ,YAAhB,iC,oBExDTkB,GAVI,uCAAG,WAAOvB,EAAMwB,GAAb,eAAAxE,EAAA,+EAESlB,EAAK2F,KAAK,WAAY,CAAEzB,OAAMwB,aAFvC,YAER7E,EAFQ,QAGDO,KAAKC,MAHJ,yCAGkB,CAAEA,MAAOR,EAASO,KAAKC,QAHzC,gCAIPR,EAASO,MAJF,yDAMP,CAAEC,MAAO,KAAElC,UANJ,yDAAH,wDCCJyG,GADiB,SAACvE,GAAD,MAAY,CAAEG,KADJ,6BACsCM,QAAST,ICD5EwE,GAA0B,0BAExBC,GADc,SAAC5G,GAAD,MAAY,CAAEsC,KAAMqE,GAAyB/D,QAAS5C,ICmC7E2D,GAAqB,CACvBkD,oBChCwB,SAAC,GAAD,IAAG7B,EAAH,EAAGA,KAAMwB,EAAT,EAASA,SAAT,8CAAwB,WAAMxD,GAAN,eAAAhB,EAAA,6DAChDgB,EAAS4D,IAAqB,IADkB,SAE3BL,GAAcvB,EAAMwB,GAFO,QAE5C7E,EAF4C,QAGnCQ,OAAOa,EAAS0D,GAAwB/E,EAASQ,QACzDR,EAASQ,QACVZ,aAAaK,QAAQ0C,EAA+B3C,EAAS4C,KAC7DvB,EAASN,EAAkBf,KAE/BqB,EAAS4D,IAAqB,IARkB,2CAAxB,wDDkCb7G,eAAQ,KAAM4D,GAAd5D,EA/Ba,SAACK,GACzB,MAAsCP,IAAMoE,SAAS,IAArD,mBAAO6C,EAAP,KAAoBC,EAApB,KACA,EAA8ClH,IAAMoE,SAAS,IAA7D,mBAAO+C,EAAP,KAAwBC,EAAxB,KASA,OACI,mCACI,qBAAKvG,UAAS,UAAKC,KAAQwE,cAA3B,SACI,eAACC,EAAA,EAAD,CAAMC,QAAQ,WAAW3E,UAAS,UAAKC,KAAQ2E,aAAb,SAAlC,UACI,cAACC,EAAA,EAAD,CAAYF,QAAQ,KAApB,4BACA,cAACE,EAAA,EAAD,CAAYF,QAAQ,WAApB,sDACA,cAACG,EAAA,EAAD,CAAWG,MAAOmB,EAAarB,SAdf,SAACC,GAC7B,IAAIC,EAAQD,EAAEE,cAAcD,MAC5BoB,EAAepB,IAY+DE,MAAM,iBAAiBR,QAAQ,WAAWS,KAAK,UACjH,cAACN,EAAA,EAAD,CAAWG,MAAOqB,EAAiBvB,SAXf,SAACC,GACjC,IAAIC,EAAQD,EAAEE,cAAcD,MAC5BsB,EAAmBtB,IASmEE,MAAM,qBAAqBvD,KAAK,WAAW+C,QAAQ,WAAWS,KAAK,UAC7I,sBAAKpF,UAAS,UAAKC,KAAQ0F,gBAA3B,UACI,cAACC,EAAA,EAAD,CAAQrB,QAAS7E,EAAM8G,OAAvB,kBACA,cAACZ,EAAA,EAAD,CAAQjB,QAAQ,YAAYJ,QAAS,kBAAM7E,EAAMyG,oBAAoB,CAAE7B,KAAM8B,EAAaN,SAAUQ,KAApG,iCEClBrD,GAAqB,CAAEZ,2BACdhD,gBAFS,SAACC,GAAD,sBAAiBA,EAAM6D,WAEPF,GAAzB5D,EAtBS,SAACK,GACrB,MAA8CP,IAAMoE,UAAS,GAA7D,mBAAOkD,EAAP,KAAwBC,EAAxB,KASA,OARAvH,IAAMwH,WAAU,WACTjH,EAAMkH,gBAAgBF,GAAmB,KAC7C,CAAChH,EAAMkH,iBACVzH,IAAMwH,WAAU,WACZ,IAAIE,EAAmBhG,aAAaC,QAAQ8C,IACxCiD,GAAqBnH,EAAMkH,gBAAmBlH,EAAMoH,qBAAqBpH,EAAM2C,wBAAwBwE,KAE5G,IACCnH,EAAMoH,oBAA4B,cAAC,EAAD,IAClCpH,EAAM+B,MAAc,0DACpBgF,EAAwB,cAAC,GAAD,CAAqBD,OAAQ,kBAAME,GAAmB,MAC7EhH,EAAMkH,eAKJ,mCAAGlH,EAAMC,WALkB,cAAC,GAAD,CAAwBkG,cAAe,kBAAMa,GAAmB,SCpBzFK,GAAa5H,IAAMC,cAAc,IAW/B4H,GAVK,SAAC,GAAkB,IAAhBrH,EAAe,EAAfA,SACnB,EAA0CR,IAAMoE,UAAS,GAAzD,mBAAO0D,EAAP,KAAsBC,EAAtB,KACA,OACI,cAACH,GAAWI,SAAZ,CAAqBlC,MAAO,CAAEgC,gBAAeC,oBAA7C,SACI,cAAC,GAAD,UACKvH,O,4DCRJyH,GAAmB,mBAEjBC,GADS,SAAA9H,GAAO,MAAK,CAAEqC,KAAMwF,GAAkBlF,QAAS3C,ICQxD+H,GAPgB,SAAA/H,GAAO,OAAI,SAAA+C,GACtCA,EAAS+E,GAAgB9H,IACzBgI,YAAW,WACPjF,EAAS+E,GAAgB,SAC1B,OCAMG,GAAcrI,IAAMC,cAAc,MA4BzC6D,GAAqB,CACvBqE,2BAEWjI,eAAQ,KAAM4D,GAAd5D,EA9BM,SAACK,GAClB,IAAM+H,EAAUC,cAChB,EAAwBvI,IAAMoE,SAAS,MAAvC,mBAAOoE,EAAP,KAAaC,EAAb,KACA,EAAkCzI,IAAMoE,UAAS,GAAjD,mBAAOH,EAAP,KAAkByE,EAAlB,KACA,EAA0B1I,IAAMoE,SAAS,IAAzC,mBAAcuE,GAAd,WAkBA,OAjBA3I,IAAMwH,WAAU,WACZ,IAAI/F,EAAcC,aAAaC,QAAQ,6BACnCF,EACAR,EAAKmB,IAAI,cAAe,CAAER,QAAS,CAAEC,cAAc,UAAD,OAAYJ,MACzD2B,MAAK,SAAAtB,GACEA,EAASO,KAAKC,QACdgG,EAAQM,KAAK,UACbrI,EAAM4H,uBAAuBrG,EAASO,KAAKC,SAE9CR,EAASO,KAAKC,OAASmG,EAAQ3G,EAASO,SAE5CiB,SAAQ,kBAAMoF,GAAa,MAC3BG,OAAM,SAAAhD,GAAC,OAAI8C,EAAS9C,MAEzB6C,GAAa,KAElB,IACCzE,EAAkB,cAAC,EAAD,IAEf,cAACoE,GAAYL,SAAb,CAAsBlC,MAAO,CAAE0C,OAAMC,UAASK,cAAe7E,EAAW8E,iBAAkBL,GAA1F,SAA2GnI,EAAMC,c,qECI7GwI,GA3BI,SAAC,GAAsC,EAApCxI,SAAoC,EAA1BK,UAA2B,IAAbN,EAAY,mBACtD,EAA0BP,IAAMiJ,WAAWZ,IAAnCG,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QACRH,EAAUC,cAUhB,EAAgCvI,IAAMoE,SAAS,MAA/C,mBAAOmC,EAAP,KAAiB2C,EAAjB,KACMxI,EAAO4F,QAAQC,GAErB,OACI,gDAAUhG,GAAV,cACI,cAAC4I,GAAA,EAAD,CAAY/D,QAbI,SAACgE,GACrB,IAAKZ,EAAM,OAAOF,EAAQM,KAAK,UAC/BM,EAAYE,EAAMrD,gBAWd,SACI,cAAC,KAAD,MAEJ,eAAC,KAAD,CAAMQ,SAAUA,EAAU7F,KAAMA,EAAM2I,QANtB,kBAAMH,EAAY,OAMlC,UACKV,GAAQ,cAACc,GAAA,EAAD,CAAUlE,QAlBJ,kBAAIkD,EAAQM,KAAK,aAkBvB,SAAwCJ,EAAKe,WACtD,cAACD,GAAA,EAAD,CAAUlE,QAdI,WACtBqD,EAAQ,MACR/G,aAAa8H,WAAW,8BAYhB,4BCJDtJ,gBADS,SAAAC,GAAK,MAAK,CAAE2C,QAAS3C,EAAM6D,QAAQyD,kBACnB,KAAzBvH,EAjBA,SAACK,GACZ,MAA4CP,IAAMiJ,WAAWrB,IAArDG,EAAR,EAAQA,iBAAkBD,EAA1B,EAA0BA,cAC1B,OACI,cAAC2B,GAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,UAAhC,SACI,eAACC,GAAA,EAAD,WACI,cAACT,GAAA,EAAD,CAAYU,KAAK,QAAQF,MAAM,UAAU,aAAW,OAAOvE,QAAS,kBAAM2C,GAAkBD,IAA5F,SACI,cAAC,KAAD,MAEJ,cAACpC,EAAA,EAAD,CAAYF,QAAQ,KAApB,SACKjF,EAAMuC,QAAQqC,OAEnB,cAAC,GAAD,CAAY2E,MAAO,CAAEC,WAAY,kB,qBCClCC,GAdC,WACZ,IAAQlC,EAAkB9H,IAAMiJ,WAAWrB,IAAnCE,cACR,OACI,qBAAKjH,UAAS,UAAKC,KAAQC,QAAb,YAAwB+G,EAAgBhH,KAAQmJ,KAAOnJ,KAAQoJ,QAA7E,SACI,cAACtF,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAUC,gBAAc,EAAxB,SACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAcC,QAAQ,kB,iFCdjCkF,GAA2B,0BAEzBC,GADc,iBAAO,CAAE3H,KAAM0H,KCY7BE,GAZF,uCAAG,WAAOvH,GAAP,mCAAAX,EAAA,8FAAwC,GAAtBmI,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,MAAOC,EAA/B,EAA+BA,KAA/B,SAEJC,EAAU,CAAEC,OAAQ,CAAE5H,QAASA,EAAQqC,OACvCmF,IAAMG,EAAQC,OAAOJ,KAAOA,GAC5BC,IAAOE,EAAQC,OAAOH,MAAQA,GAC9BC,IAAMC,EAAQC,OAAOF,KAAOA,GALxB,SAMKvJ,EAAKmB,IAAL,WAAqBqI,GAN1B,mGAQD,CAAEnI,MAAO,KAAElC,UARV,0DAAH,sDCQEuK,GARA,uCAAG,WAAO7H,EAAQT,GAAf,SAAAF,EAAA,+EAEGlB,EAAK2J,IAAL,2BAA6B9H,EAAQqC,MAAQ9C,GAFhD,iGAIH,CAAEC,MAAO,KAAElC,UAJR,wDAAH,wDCDFyK,GAA8B,8BAE5BC,GADoB,SAAC3K,GAAD,MAAY,CAAEsC,KAAMoI,GAA6B9H,QAAS5C,ICAhF4K,GAAgB,gBAEdC,GADK,SAAC1I,GAAD,MAAY,CAAEG,KAAMsI,GAAehI,QAAST,ICFnD2I,GAAW,WAETC,GADC,SAACrH,GAAD,MAAgB,CAAEpB,KAAMwI,GAAUlI,QAASc,ICD9CsH,GAAsB,sBAEpBC,GADY,iBAAO,CAAE3I,KAAM0I,KCD7BE,GAAqB,qBAEnBC,GADW,iBAAO,CAAE7I,KAAM4I,KCD5BE,GAAqB,qBAEnBC,GADU,SAAC3H,GAAD,MAAgB,CAAEpB,KAAM8I,GAAoBxI,QAASc,ICqB/D4H,GAdS,SAAC3I,EAAS4I,GAAV,8CAAgC,WAAOvI,GAAP,iBAAAhB,EAAA,6DACpDgB,EAASiI,MAD2C,SAE/BT,GAAU7H,EAAS4I,GAFY,WAEhD5J,EAFgD,QAGxCQ,OAAOa,EAAS6H,GAAYlJ,EAASQ,QACjDa,EAAS2H,IAA2B,IAC/BhJ,EAASQ,MALsC,iCAMpB+H,GAAQvH,GANY,OAM5C6I,EAN4C,OAOhDxI,EAAS+H,GAAQS,EAAgBtJ,KAAKgB,SACtCF,EAASqI,GAAiB,OARsB,QAUpDrI,EAASmI,MAV2C,4CAAhC,uDCCTM,GARH,uCAAG,WAAO9I,EAAQT,GAAf,SAAAF,EAAA,+EAEMlB,EAAK2F,KAAL,2BAA8B9D,EAAQqC,MAAQ9C,GAFpD,iGAIA,CAAEC,MAAO,KAAElC,UAJX,wDAAH,wDCqBGyL,GAdM,SAAC/I,EAASgJ,GAAV,8CAAqB,WAAO3I,GAAP,iBAAAhB,EAAA,6DACtCgB,EAASiI,MAD6B,SAEjBQ,GAAO9I,EAASgJ,GAFC,WAElChK,EAFkC,QAGzBQ,OAAOa,EAAS6H,GAAYlJ,EAASQ,QAClDa,EAAS2H,IAA2B,IAC/BhJ,EAASQ,MALwB,iCAMN+H,GAAQvH,GANF,OAM9B6I,EAN8B,OAOlCxI,EAAS+H,GAAQS,EAAgBtJ,KAAKgB,SACtCF,EAASqI,GAAiB,OARQ,QAUtCrI,EAASmI,MAV6B,4CAArB,uD,qFC+NfxH,GAAqB,CACvBiI,YAAa,kBAAM,SAAA5I,GAAQ,OAAIA,EAASiH,QACxCqB,mBACAI,iBAEW3L,gBAVS,SAAAC,GAAK,MAAK,CAC9B2C,QAAS3C,EAAM6D,QAAQyD,eACvBuE,WAAY7L,EAAM8L,IAAID,WACtBtL,KAAMP,EAAM8L,IAAIC,qBAOoBpI,GAAzB5D,EA7NS,SAAC,GAA2F,IAAzFQ,EAAwF,EAAxFA,KAAMqL,EAAkF,EAAlFA,YAAuDC,GAA2B,EAArEG,UAAqE,EAA1DC,SAA0D,EAAhDzB,UAAgD,EAArC0B,SAAqC,EAA3BL,YAAezL,EAAY,mBAE/G,EAAwCP,IAAMoE,SAAS,IAAvD,mBAAOkI,EAAP,KAAqBC,EAArB,KACA,EAAkDvM,IAAMoE,SAAS,IAAjE,mBAAOoI,EAAP,KAA0BC,EAA1B,KACA,EAAwCzM,IAAMoE,SAAS,IAAvD,mBAAOsI,EAAP,KAAqBC,EAArB,KAOA,EAA0B3M,IAAMoE,SAAS,IAAzC,mBAAOwI,EAAP,KAAcC,EAAd,KACA,EAAoC7M,IAAMoE,SAAS,IAAnD,mBAAO0I,EAAP,KAAmBC,EAAnB,KAOA,EAA4B/M,IAAMoE,SAAS,IAA3C,mBAAO4I,EAAP,KAAeC,EAAf,KACA,EAAoCjN,IAAMoE,SAAS,IAAnD,mBAAO8I,EAAP,KAAmBC,EAAnB,KAOA,EAA0BnN,IAAMoE,SAAS,IAAzC,mBAAOgJ,EAAP,KAAcC,EAAd,KACA,EAAoCrN,IAAMoE,SAAS,IAAnD,mBAAOkJ,EAAP,KAAmBC,EAAnB,KAOA,EAA4BvN,IAAMoE,UAAS,GAA3C,mBAAOoJ,EAAP,KAAeC,EAAf,KAOA,EAA4BzN,IAAMoE,SAAS,IAA3C,mBAAOsJ,EAAP,KAAeC,EAAf,KACA,GAAsC3N,IAAMoE,SAAS,IAArD,qBAAOwJ,GAAP,MAAoBC,GAApB,MAMA,GAAwC7N,IAAMoE,SAAN,UAAkB0J,OAASC,OAAO,QAAlC,YAA6CD,OAASC,OAAO,MAA7D,YAAsED,OAASC,OAAO,QAA9H,qBAAOC,GAAP,MAAqBC,GAArB,MACA,GAAwCjO,IAAMoE,SAAN,UAAkB0J,OAASC,OAAO,QAAlC,YAA6CD,OAASC,OAAO,MAA7D,YAAsED,OAASC,OAAO,QAA9H,qBAAOG,GAAP,MAAqBC,GAArB,MACA,GAAsDnO,IAAMoE,SAAS,IAArE,qBAAOgK,GAAP,MAA4BC,GAA5B,MAGMC,GAAc,WAChB/B,EAAgB,IAChBI,EAAgB,IAChBE,EAAS,IACTI,EAAU,IACVI,EAAS,IACTI,GAAU,GACVE,EAAU,IACVM,GAAgB,GAAD,OAAIH,OAASC,OAAO,QAApB,YAA+BD,OAASC,OAAO,MAA/C,YAAwDD,OAASC,OAAO,QACvFI,GAAgB,GAAD,OAAIL,OAASC,OAAO,QAApB,YAA+BD,OAASC,OAAO,MAA/C,YAAwDD,OAASC,OAAO,QACvFM,GAAuB,KASrBE,GAAoB,WACtBD,KACAvC,KAEEyC,GAAkB,kBAAMjO,EAAMsL,aAAatL,EAAMuC,QAAS,CAAEwJ,eAAcI,eAAcE,QAAOI,SAAQI,QAAOI,SAAQE,SAAQM,gBAAcE,gBAAcE,0BAC1JK,GAAkB,kBAAMlO,EAAMkL,gBAAgBlL,EAAMuC,QAAS,CAAEZ,GAAI8J,EAAWtH,IAAK4H,eAAcI,eAAcE,QAAOI,SAAQI,QAAOI,SAAQE,SAAQM,gBAAcE,gBAAcE,0BAevL,OAdApO,IAAMwH,WAAU,WACRwE,IACAO,EAAgBP,EAAWM,cAC3BK,EAAgBX,EAAWU,cAC3BG,EAASb,EAAWY,OACpBK,EAAUjB,EAAWgB,QACrBK,EAASrB,EAAWoB,OACpBK,EAAUzB,EAAWwB,QACrBG,EAAU3B,EAAW0B,QACrBO,GAAgB,GAAD,OAAIH,KAAO9B,EAAWgC,cAAcD,OAAO,QAA3C,YAAsDD,KAAO9B,EAAWgC,cAAcD,OAAO,MAA7F,YAAsGD,KAAO9B,EAAWgC,cAAcD,OAAO,QAC5JI,GAAgB,GAAD,OAAIL,KAAO9B,EAAWkC,cAAcH,OAAO,QAA3C,YAAsDD,KAAO9B,EAAWkC,cAAcH,OAAO,MAA7F,YAAsGD,KAAO9B,EAAWkC,cAAcH,OAAO,QAC5JM,GAAuBrC,EAAWoC,wBAEvC,CAACpC,IAEA,cAAC0C,GAAA,EAAD,CACIhO,KAAMA,EACNiO,WAAW,EACXtF,QAASkF,GAHb,SAKI,sBAAK1N,UAAS,UAAKC,KAAQwE,cAA3B,UACI,cAACK,EAAA,EAAD,CACIrD,QAASkK,EACToC,WAAYpC,EACZvG,KAAK,QACLH,MAAOwG,EACP1G,SApGiB,SAACC,GAC9B,IAAIC,EAAQD,EAAEE,cAAcD,MACX2G,EAAN,KAAV3G,EAAqC,sBAA8C,IACpFyG,EAAgBzG,IAkGJE,MAAM,gBACNR,QAAQ,aAEZ,cAACG,EAAA,EAAD,CACIM,KAAK,QACLH,MAAO4G,EACP9G,SAAU,SAAAC,GAAC,OAAI8G,EAAgB9G,EAAEgJ,OAAO/I,QACxCE,MAAM,gBACNR,QAAQ,WACR/C,KAAK,WAET,cAACkD,EAAA,EAAD,CACIrD,QAASwK,EACT8B,WAAY9B,EACZ7G,KAAK,QACLH,MAAO8G,EACPhH,SA7GU,SAACC,GACvB,IAAIC,EAAQD,EAAEE,cAAcD,MACXiH,EAAN,KAAVjH,EAA8B,sBAAuC,IACtE+G,EAAS/G,IA2GGE,MAAM,QACNR,QAAQ,aAEZ,cAACG,EAAA,EAAD,CACIrD,QAAS4K,EACT0B,WAAY1B,EACZjH,KAAK,QACLH,MAAOkH,EACPpH,SA9GU,SAACC,GACvB,IAAIC,EAAQD,EAAEE,cAAcD,MACXqH,EAAN,KAAVrH,EAA8B,sBAAuC,IACtEmH,EAAUnH,IA4GEE,MAAM,SACNR,QAAQ,aAEZ,cAACG,EAAA,EAAD,CACIrD,QAASgL,EACTsB,WAAYtB,EACZrH,KAAK,QACLH,MAAOsH,EACPxH,SA/GU,SAACC,GACvB,IAAIC,EAAQD,EAAEE,cAAcD,MACXyH,EAAN,KAAVzH,EAA8B,sBAAuC,IACtEuH,EAASvH,IA6GGE,MAAM,QACNR,QAAQ,aAEZ,eAACsJ,GAAA,EAAD,CAAatJ,QAAQ,WAAWS,KAAK,QAArC,UACI,cAAC8I,GAAA,EAAD,CAAY7M,GAAG,oCAAf,oBACA,eAAC8M,GAAA,EAAD,CACIlJ,OAAkB,IAAX0H,EAAkB,WAAa,WACtC5H,SAhHO,SAACC,GAExB,GAAc,aADFA,EAAEgJ,OAAO/I,MACK,OAAO2H,GAAU,GAC3CA,GAAU,IA2GE,UAII,cAACnE,GAAA,EAAD,CAAUxD,MAAM,WAAhB,sBACA,cAACwD,GAAA,EAAD,CAAUxD,MAAM,WAAhB,0BAGR,cAACH,EAAA,EAAD,CACIrD,QAASsL,GACTgB,WAAYhB,GACZnL,KAAK,SACLwD,KAAK,QACLH,MAAO4H,EACP9H,SApHW,SAACC,GACxB,IAAIC,EAAQD,EAAEE,cAAcD,MACX+H,GAAN,KAAV/H,EAA+B,sBAAwC,IACxE6H,EAAU7H,IAkHEE,MAAM,SACNR,QAAQ,aAEZ,cAACG,EAAA,EAAD,CACIzD,GAAG,OACH8D,MAAM,gBACNvD,KAAK,OACLwM,aAAcjB,GACdkB,gBAAiB,CACbC,QAAQ,GAEZvJ,SAxHiB,SAACC,GAAD,OAAOoI,GAAgBpI,EAAEgJ,OAAO/I,UA0HrD,cAACH,EAAA,EAAD,CACIzD,GAAG,OACH8D,MAAM,gBACNvD,KAAK,OACLwM,aAAcf,GACdgB,gBAAiB,CACbC,QAAQ,GAEZvJ,SAjIiB,SAACC,GAAD,OAAOsI,GAAgBtI,EAAEgJ,OAAO/I,UAmIrD,cAACH,EAAA,EAAD,CACIG,MAAOsI,GACPxI,SAAU,SAAAC,GAAC,OAAIwI,GAAuBxI,EAAEgJ,OAAO/I,QAC/CG,KAAK,QACLD,MAAM,uBACNoJ,WAAS,EACT5J,QAAQ,aAEZ,sBAAK3E,UAAWC,KAAQuO,cAAxB,UACI,cAAC5I,EAAA,EAAD,CACIrB,QAASmJ,GADb,mBAKA,cAAC9H,EAAA,EAAD,CACI6I,YAAaxC,GAAcN,GAAqBU,GAAcU,IAC9DpI,QAAQ,YACRJ,QAvIC,WACb4G,EACAyC,KAAkBrL,MAAK,kBAAMkL,QAE7BE,KAAkBpL,MAAK,kBAAMkL,SAgIrB,SAKKtC,EAAa,SAAW,2B,0CC1NpCuD,GAA0B,0BAExBC,GADa,iBAAO,CAAE/M,KAAM8M,KCD9BE,GAAoB,oBAElBC,GADS,SAACC,GAAD,MAAW,CAAElN,KAAMgN,GAAmB1M,QAAS4M,ICOxDC,GAPM,uCAAG,WAAO9M,EAAQU,GAAf,SAAArB,EAAA,+EAEHlB,EAAKmB,IAAL,kCAAoCU,EAAQqC,MAAQ,CAAEuF,OAAQ,CAAEmF,EAAGrM,KAFhE,iGAIT,CAAElB,MAAM,EAAD,KAJE,wDAAH,wDCDRwN,GAAqB,qBAEnBC,GADU,SAAC5P,GAAD,MAAY,CAAEsC,KAAMqN,GAAoB/M,QAAS5C,I,cCuBpE2D,GAAqB,CACvB0L,oBAAqB,kBAAM,SAAArM,GAAQ,OAAIA,EAASqM,QAChDQ,gBCrBoB,SAAClN,EAASU,GAAV,OAAoB,SAAAL,GACxCA,EAAS4M,IAAiB,IAC1BH,GAAgB9M,EAASU,GACpBJ,MAAK,SAAAtB,GACF,IAAMQ,EAAgBR,EAAhBQ,MAAOD,EAASP,EAATO,KACb,OAAIC,EAAca,EAAS8M,GAAa3N,IACpCD,EAAac,EAASuM,GAAgBrN,EAAKgB,cAA/C,KAEHC,SAAQ,WACLH,EAAS4M,IAAiB,UDcvB7P,gBAPS,SAAAC,GAAK,MAAK,CAC9B2C,QAAQ3C,EAAM6D,QAAQyD,kBAMc3D,GAAzB5D,EApBG,SAAC,GAA0B,IAAxBgQ,EAAuB,EAAvBA,OAAW3P,EAAY,mBACxC,OACI,sBAAK4P,QAAQ,OAAOtP,UAAWC,KAAQC,QAAvC,UACI,sCACA,qBAAKF,UAAS,UAAKC,KAAQsP,WAA3B,SACI,cAACjH,GAAA,EAAD,CAAY/D,QAAS8K,EAAQvG,MAAM,UAAU,aAAW,iBAAiB0G,UAAU,OAAnF,SACI,cAAC,KAAD,QAGR,cAAC1K,EAAA,EAAD,CAAWC,SAAU,SAACC,GAAD,OAAKtF,EAAMyP,gBAAgBzP,EAAMuC,QAAQ+C,EAAEE,cAAcD,QAAQwK,YAAY,SAASrK,KAAK,QAAQT,QAAQ,mB,UEjB/H+K,GAA0B,0BAExBC,GADc,iBAAO,CAAE/N,KAAM8N,K,gCC8CtCzM,GAAqB,CACvBiI,YAAa,kBAAM,SAAA5I,GAAQ,OAAIA,EAASqN,SAE7BtQ,gBAPS,SAAAC,GAAK,MAAK,CAC9BO,KAAMP,EAAM8L,IAAIwE,qBAChBC,IAAKvQ,EAAM8L,IAAID,cAKqBlI,GAAzB5D,EA3CS,SAAC,GAA0C,IAAxCQ,EAAuC,EAAvCA,KAAMqL,EAAiC,EAAjCA,YAAa2E,EAAoB,EAApBA,IAAoB,mBAI9D,OAAKA,EAED,cAAChC,GAAA,EAAD,CAAQhO,KAAMA,EAAMiO,WAAW,EAAMtF,QALf,WACtB0C,KAIA,SACI,eAAC4E,GAAA,EAAD,CAAKC,QAAQ,OAAb,UACI,gCACI,cAAClL,EAAA,EAAD,CAAYF,QAAQ,WAAW2K,QAAQ,QAAQU,cAAY,EAA3D,2BACA,cAACnL,EAAA,EAAD,CAAYF,QAAQ,KAAKqL,cAAY,EAACR,UAAU,MAAhD,SAAuDK,EAAIpE,kBAE/D,gCACI,cAAC5G,EAAA,EAAD,CAAYF,QAAQ,WAAW2K,QAAQ,QAAQU,cAAY,EAA3D,0BACA,cAACnL,EAAA,EAAD,CAAYF,QAAQ,KAAKqL,cAAY,EAACR,UAAU,MAAhD,SAAuDK,EAAI9D,WAE/D,gCACI,cAAClH,EAAA,EAAD,CAAYF,QAAQ,WAAW2K,QAAQ,QAAQU,cAAY,EAA3D,2BACA,cAACnL,EAAA,EAAD,CAAYF,QAAQ,KAAKqL,cAAY,EAACR,UAAU,MAAhD,SAAuDvC,KAAO4C,EAAI1C,cAAcD,OAAO,kBAE3F,gCACI,cAACrI,EAAA,EAAD,CAAYF,QAAQ,WAAW2K,QAAQ,QAAQU,cAAY,EAA3D,2BACA,cAACnL,EAAA,EAAD,CAAYF,QAAQ,KAAKqL,cAAY,EAACR,UAAU,MAAhD,SAAuDvC,KAAO4C,EAAIxC,cAAcH,OAAO,kBAE3F,gCACI,cAACrI,EAAA,EAAD,CAAYF,QAAQ,WAAW2K,QAAQ,QAAQU,cAAY,EAA3D,oBACA,cAACnL,EAAA,EAAD,CAAYF,QAAQ,KAAKqL,cAAY,EAACR,UAAU,MAAhD,SAAuDK,EAAIhD,YAE/D,gCACI,cAAChI,EAAA,EAAD,CAAYF,QAAQ,WAAW2K,QAAQ,QAAQU,cAAY,EAA3D,yBACA,cAACnL,EAAA,EAAD,CAAYF,QAAQ,KAAKqL,cAAY,EAACR,UAAU,MAAhD,SAAuDK,EAAItC,8BA1B1D,Q,oJCVR0C,GAAqB9Q,IAAMC,cAAc,MAgBvC8Q,GAfa,SAAC,GAAkB,IAAhBvQ,EAAe,EAAfA,SAC3B,EAA0BR,IAAMoE,SAAS,MAAzC,mBAAO4M,EAAP,KAAcC,EAAd,KACMC,EAAqB,kBAAMD,EAASE,OAAOC,aAMjD,OALApR,IAAMwH,WAAU,WAGZ,OAFA0J,IACAC,OAAOE,iBAAiB,SAAUH,GAC3B,kBAAMC,OAAOG,oBAAoB,SAAUJ,MACnD,IAEC,cAACJ,GAAmB9I,SAApB,CAA6BlC,MAAO,CAACkL,SAArC,SACKxQ,KCZA+Q,GAAyB,yBAEvBC,GADa,SAACd,GAAD,MAAU,CAAEjO,KAAM8O,GAAwBxO,QAAS2N,ICDlEe,GAAyB,yBAEvBC,GADa,SAAChB,GAAD,MAAU,CAAEjO,KAAMgP,GAAwB1O,QAAS2N,ICQhEiB,GARA,uCAAG,WAAO7O,EAAQZ,GAAf,SAAAC,EAAA,+EAEGlB,EAAK2Q,OAAL,mBAAwB1P,EAAxB,oBAAsCY,EAAQqC,OAFjD,iGAIH,CAAE7C,MAAO,KAAElC,UAJR,wDAAH,wDCiBAyR,GAZS,SAAC/O,EAASZ,GAAV,8CAAiB,WAAOiB,GAAP,iBAAAhB,EAAA,6DACrCgB,EAASiI,MAD4B,SAEhBuG,GAAU7O,EAASZ,GAFH,WAEjCJ,EAFiC,QAGzBQ,OAAOa,EAAS6H,GAAYlJ,EAASQ,QAC5CR,EAASQ,MAJuB,iCAKL+H,GAAQvH,GALH,OAK7B6I,EAL6B,OAMjCxI,EAAS+H,GAAQS,EAAgBtJ,KAAKgB,SANL,QAQrCF,EAASmI,MAR4B,4CAAjB,uD,SCNXwG,GAAoB,oBAElBC,GADS,SAAAC,GAAW,MAAK,CAAEvP,KAAMqP,GAAmB/O,QAASiP,IC0B7DC,GApBQ,SAACnP,EAASkP,EAAarC,GAAvB,8CAAgC,WAAMxM,GAAN,SAAAhB,EAAA,sDAInDgB,EAASiI,MACTf,GAAQvH,EAAS,CAAEwH,KAAM0H,EAAc,IAClC5O,MAAK,SAAAtB,GACF,IAAMQ,EAAgBR,EAAhBQ,MAAOD,EAASP,EAATO,KACb,OAAIC,EAAca,EAAS6H,GAAY1I,IACnCD,GACAc,EAAS4O,GAAgBC,EAAc,IAChC7O,EAAS+H,GAAQ,GAAD,oBAAKyE,GAAL,aAActN,EAAKgB,iBAF9C,KAKHC,SAAQ,WACLH,EAASmI,SAfkC,2CAAhC,uDCajB4G,G,oDAEF,WAAY3R,GAAQ,IAAD,+BACf,cAAMA,IACDJ,MAAQ,CACTgS,aAAc,KACdC,YAAa,MAEjB,EAAKC,cAAgBrS,IAAMsS,UAAU,MACrC,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,iBACzB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,iBAClB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,iBACpB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,iBACpB,EAAKI,kBAAoB,EAAKA,kBAAkBJ,KAAvB,iBACzB,EAAKK,eAAiB7S,IAAMsS,UAAU,MAZvB,E,sDAcnB,WAAqB,IAAD,OACZQ,KAAKT,cAAcU,UACnBD,KAAKD,eAAeE,QAAU,IAAIC,sBAAqB,SAACC,GAAD,OAAa,EAAKL,kBAAkBK,EAAQ,MAAK,CAAEC,UAAW,IACrHJ,KAAKD,eAAeE,QAAQI,QAAQL,KAAKT,cAAcU,Y,+BAG/D,SAAkBK,GAEVA,EAAMC,iBAAmBP,KAAKvS,MAAM0D,WAAW6O,KAAKvS,MAAM0R,eAAea,KAAKvS,MAAMuC,QAASgQ,KAAKvS,MAAM+J,KAAMwI,KAAKvS,MAAMoP,Q,+BAQjI,SAAkB9J,EAAG6K,GACjBoC,KAAKQ,SAAS,CACVnB,aAActM,EAAEgJ,OAChBuD,YAAa1B,M,wBAGrB,WACIoC,KAAKvS,MAAMgT,cAAcT,KAAK3S,MAAMiS,aACpCU,KAAKQ,SAAS,CAAEnB,aAAc,S,0BAElC,WACIW,KAAKvS,MAAMiT,iBAAiBV,KAAK3S,MAAMiS,aAEvCU,KAAKQ,SAAS,CAAEnB,aAAc,KAAMC,YAAa,S,0BAErD,WACIU,KAAKvS,MAAMsR,gBAAgBiB,KAAKvS,MAAMuC,QAASgQ,KAAK3S,MAAMiS,YAAY1N,KACtEoO,KAAKQ,SAAS,CAAEnB,aAAc,S,oBAIlC,WAAU,IAAD,OACCnB,EAAU8B,KAAKW,QAAfzC,MACN,OACI,qCACI,eAAC0C,GAAA,EAAD,CAAgB7S,UAAS,UAAKC,KAAQC,SAAWmB,GAAG,gBAApD,UACI,eAACyR,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,UACI,eAACC,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAWjT,UAAS,UAAKC,KAAQiT,KAAb,YAAqBjT,KAAQkT,IAAjD,2BACEhD,EAAQ,KAAQ,cAAC8C,GAAA,EAAD,CAAWjT,UAAS,UAAKC,KAAQiT,KAAb,YAAqBjT,KAAQkT,IAAjD,2BAChBhD,EAAQ,KAAQ,cAAC8C,GAAA,EAAD,CAAWjT,UAAS,UAAKC,KAAQiT,KAAb,YAAqBjT,KAAQkT,IAAjD,sBAChBhD,EAAQ,KAAQ,cAAC8C,GAAA,EAAD,CAAWjT,UAAS,UAAKC,KAAQiT,KAAb,YAAqBjT,KAAQkT,IAAjD,sBAChBhD,EAAQ,KAAQ,cAAC8C,GAAA,EAAD,CAAWjT,UAAS,UAAKC,KAAQiT,KAAb,YAAqBjT,KAAQkT,IAAjD,oBAClB,cAACF,GAAA,EAAD,CAAWjT,UAAS,UAAKC,KAAQiT,KAAb,YAAqBjT,KAAQkT,WAGzD,cAACC,GAAA,EAAD,WACMnB,KAAKvS,MAAM2T,aAAaC,OAASrB,KAAKvS,MAAM2T,aAAepB,KAAKvS,MAAMoP,MAAMzK,KAAI,SAACwL,GAAD,OAC9E,eAACmD,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAWjT,UAAWC,KAAQsT,GAAI/D,UAAU,KAAKgE,MAAM,MAAvD,SAA8D3D,EAAIpE,eAChE0E,EAAQ,KAAQ,cAAC8C,GAAA,EAAD,CAAWjT,UAAS,UAAKC,KAAQiT,KAAb,YAAqBjT,KAAQkT,IAAjD,SAAwDtD,EAAIhE,eAC5EsE,EAAQ,KAAQ,cAAC8C,GAAA,EAAD,CAAWjT,UAAS,UAAKC,KAAQiT,KAAb,YAAqBjT,KAAQkT,IAAjD,SAAwDlG,KAAO4C,EAAI1C,cAAcD,OAAO,eACxGiD,EAAQ,KAAQ,cAAC8C,GAAA,EAAD,CAAWjT,UAAS,UAAKC,KAAQiT,KAAb,YAAqBjT,KAAQkT,IAAjD,SAAwDlG,KAAO4C,EAAIxC,cAAcH,OAAO,eACxGiD,EAAQ,KAAQ,cAAC8C,GAAA,EAAD,CAAWjT,UAAS,UAAKC,KAAQiT,KAAb,YAAqBjT,KAAQkT,IAAjD,SAAwDtD,EAAIhD,SAC9E,cAACoG,GAAA,EAAD,CAAWjT,UAAS,UAAKC,KAAQsT,GAAb,YAAmBtT,KAAQwT,UAAYjE,UAAU,KAAKgE,MAAM,MAAhF,SAAsF,cAAC,KAAD,CAAcjP,QAAS,SAACS,GAAD,OAAO,EAAK0M,kBAAkB1M,EAAG6K,UANnIA,EAAIhM,aAW/B,sBAAK6P,IAAK,SAACC,GAAD,OAAQ,EAAKnC,cAAcU,QAAUyB,GAAI3T,UAAS,UAAKC,KAAQ2T,gBAAzE,cAA6F3B,KAAKvS,MAAM0D,WAAa,cAAC,EAAD,IAArH,UAGJ,eAAC,KAAD,CACI/B,GAAG,cACHqE,SAAUuM,KAAK3S,MAAMgS,aACrBuC,aAAW,EACXhU,KAAM4F,QAAQwM,KAAK3S,MAAMgS,cACzB9I,QAAS,kBAAM,EAAKiK,SAAS,CAAEnB,aAAc,QALjD,UAOI,cAAC7I,GAAA,EAAD,CAAUlE,QAAS0N,KAAKL,WAAxB,kBACA,cAACnJ,GAAA,EAAD,CAAUlE,QAAS0N,KAAKJ,aAAxB,oBACA,cAACpJ,GAAA,EAAD,CAAUlE,QAAS0N,KAAKH,aAAxB,8B,GA9FG3S,IAAM2U,WAAvBzC,GACK0C,YAAc9D,GAmGzB,IAQMhN,GAAqB,CACvB0P,iBAAkB,SAAC9C,GAAD,OAAS,SAAAvN,GAAQ,OAAIA,EAASqO,GAAoBd,MACpE6C,cAAe,SAAC7C,GAAD,OAAS,SAACvN,GAAD,OAAcA,EAASuO,GAAoBhB,MACnEmB,mBACAI,mBAEW/R,gBAdS,SAAAC,GAAK,MAAK,CAC9B0U,YAAa1U,EAAM8L,IAAI6I,gBACvB7Q,UAAW9D,EAAM8L,IAAI8I,eACrBjS,QAAS3C,EAAM6D,QAAQyD,eACvBkI,KAAMxP,EAAM8L,IAAI0D,KAChBuE,aAAc/T,EAAM8L,IAAIiI,aACxB5J,KAAMnK,EAAM8L,IAAI+F,eAQoBlO,GAAzB5D,CAA6CgS,ICtI/C8C,GAA0B,0BAExBC,GADoB,SAAC9U,GAAD,MAAY,CAAEsC,KAAMuS,GAAyBjS,QAAS5C,IC4InF2D,GAAqB,CACvBoR,cCxIkB,SAACpS,EAAQ2H,GAAT,OAAqB,SAAAtH,GACvCA,EAASiI,MACTf,GAAQvH,EAAQ2H,GACXrH,MAAK,SAAAtB,GACF,IAAMQ,EAAgBR,EAAhBQ,MAAOD,EAASP,EAATO,KACb,OAAIC,EAAca,EAAS6H,GAAY1I,IACnCD,EAAac,EAAS+H,GAAQ7I,EAAKgB,cAAvC,KAEHC,SAAQ,WACLH,EAASmI,WDgIjB6J,2BE7I+B,SAAChV,GAAD,8CAAW,WAAOgD,GAAP,SAAAhB,EAAA,sDAC1CgB,EAAS2H,GAA2B3K,IAChCA,GAAOgD,EAASqI,GAAiB,KAFK,2CAAX,uDF8I/BK,gBACAuJ,uBGhJ2B,SAAC1E,GAAD,OAAS,SAACvN,GAAD,OAAcA,EAASqI,GAAiBkF,MHiJ5EjF,mBACA4J,2BIjJ+B,SAAClV,GAAD,8CAAW,WAAOgD,GAAP,SAAAhB,EAAA,sDAC1CgB,EAAS8R,GAA2B9U,IAChCA,GAAOgD,EAASqI,GAAiB,KAFK,2CAAX,wDJmJpBtL,gBAZS,SAAAC,GAAK,kCACtBA,EAAM8L,KADgB,IAEzBnJ,QAAS3C,EAAM6D,QAAQyD,mBAUa3D,GAAzB5D,EAlIH,SAACK,GA+ET,OAJAP,IAAMwH,WAAU,WACPjH,EAAM+B,OAAU/B,EAAMwU,gBAAwC,IAAtBxU,EAAMoP,KAAKwE,QAAc5T,EAAM2U,cAAc3U,EAAMuC,WACjG,IAGC,mCAEQvC,EAAM+B,MAAQ,6BAAK/B,EAAM+B,QACrB,qCACI,cAAC,GAAD,CACI4N,OAAQ,kBAAM3P,EAAM4U,4BAA2B,MAGlD5U,EAAMoP,KAAKwE,QACJ,cAAC,GAAD,CAIIzB,aAAcjH,KAM1B,cAAC,GAAD,IAQA,cAAC,GAAD,YK/GT6J,I,OAbC,WACZ,OACI,qCACI,8BACI,cAAC5P,EAAA,EAAD,CAAYF,QAAQ,KAApB,uBAEJ,gCACI,wBACA,gC,qBCKD+P,GAVC,WACZ,OACI,qBAAK1U,UAAS,UAAKC,KAAQC,QAAb,UAAd,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOyU,OAAK,EAACC,KAAK,IAAIpF,UAAWqF,KACjC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,WAAWpF,UAAWiF,W,qBCYzCK,GAdH,WACR,IAAQnN,EAASxI,IAAMiJ,WAAWZ,IAA1BG,KACFF,EAAUC,cAEhB,OADAvI,IAAMwH,WAAU,WAAagB,GAAMF,EAAQM,KAAK,YAAa,CAACN,EAASE,IAEnE,eAAC,GAAD,WACI,cAAC,GAAD,IACA,sBAAK3H,UAAS,UAAKC,KAAQ8U,iBAA3B,UACI,cAAC,GAAD,IACA,cAAC,GAAD,W,+BCjBD,OAA0B,iCC2DnC9R,GAAqB,CAAEqE,2BACdjI,eAAQ,KAAM4D,GAAd5D,EA7CD,SAACK,GACX,IAAM+H,EAAUC,cAEhB,EAAgCvI,IAAMoE,SAAS,IAA/C,mBAAOmF,EAAP,KAAiBsM,EAAjB,KACA,EAAgC7V,IAAMoE,SAAS,IAA/C,mBAAOuC,EAAP,KAAiBmP,EAAjB,KACA,EAA0B9V,IAAMiJ,WAAWZ,IAAnCG,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAWd,OAHAzI,IAAMwH,WAAU,WACRgB,GAAMF,EAAQM,KAAK,QAGvB,eAAC+H,GAAA,EAAD,CAAK9P,UAAS,UAAKC,KAAQwE,aAAb,SAAd,UACI,sBAAKzE,UAAS,UAAKC,KAAQiV,eAA3B,UACI,qBAAKC,IAAG,UAAKC,IAAQC,IAAI,SACzB,cAACxQ,EAAA,EAAD,yBAEJ,eAACyQ,GAAA,EAAD,CAAOtV,UAAWC,KAAQC,QAA1B,UACI,cAAC4E,EAAA,EAAD,CACIM,KAAK,QACLD,MAAM,WACNF,MAAOyD,EACP/D,QAAQ,WACRI,SAAU,SAACC,GAAD,OAAOgQ,EAAYhQ,EAAEgJ,OAAO/I,UAE1C,cAACH,EAAA,EAAD,CACIM,KAAK,QACLxD,KAAK,WACLuD,MAAM,WACNF,MAAOa,EACPnB,QAAQ,WACRI,SAAU,SAACC,GAAD,OAAOiQ,EAAYjQ,EAAEgJ,OAAO/I,UAE1C,cAACW,EAAA,EAAD,CAAQjB,QAAQ,YAAYJ,QAhC1B,WACVnE,EAAK2F,KAAK,cAAe,CAAE2C,WAAU5C,aAChCvD,MAAK,SAAAtB,GACEA,EAASO,KAAKC,OAAO/B,EAAM4H,uBAAuBrG,EAASO,KAAKC,QACnER,EAASO,KAAKC,OAASmG,EAAQ3G,EAASO,KAAKmG,UA4B9C,mBACA,mBAAGpD,QAAS,kBAAMkD,EAAQM,KAAK,cAA/B,gC,qBCuFDwN,GAhIE,WACb,IAAM9N,EAAUC,cACR8N,EAAWrW,IAAMiJ,WAAWlJ,GAA5BsW,OACR,EAAkCrW,IAAMoE,SAAS,IAAjD,mBAAOkS,EAAP,KAAkBC,EAAlB,KACA,EAA4CvW,IAAMoE,SAAS,IAA3D,mBAAOoS,EAAP,KAAuBC,EAAvB,KAMA,EAAgCzW,IAAMoE,SAAS,IAA/C,mBAAOsS,EAAP,KAAiBC,EAAjB,KACA,EAA0C3W,IAAMoE,SAAS,IAAzD,mBAAOwS,EAAP,KAAsBC,EAAtB,KAMA,EAAgC7W,IAAMoE,SAAS,IAA/C,mBAAOmF,EAAP,KAAiBsM,EAAjB,KACA,EAA0C7V,IAAMoE,SAAS,IAAzD,mBAAO0S,EAAP,KAAsBC,EAAtB,KAOA,EAAgC/W,IAAMoE,SAAS,IAA/C,mBAAOuC,EAAP,KAAiBmP,EAAjB,KACA,EAA0C9V,IAAMoE,SAAS,IAAzD,mBAAO4S,EAAP,KAAsBC,EAAtB,KAMA,EAA8CjX,IAAMoE,SAAS,IAA7D,mBAAO8S,EAAP,KAAwBC,EAAxB,KACA,EAAwDnX,IAAMoE,SAAS,IAAvE,mBAAOgT,EAAP,KAA6BC,EAA7B,KAMA,EAA0BrX,IAAMiJ,WAAWZ,IAAnCG,EAAR,EAAQA,KAQF8O,GARN,EAAc7O,QAQa,WACL,KAAb9B,GAAyC,KAApBuQ,IAClBvQ,IAAauQ,IACbD,EAAiB,2BACjBI,EAAwB,4BAExB1Q,IAAauQ,IACS,4BAAlBF,GAA6CC,EAAiB,IACrC,4BAAzBG,GAAoDC,EAAwB,MAGrE,KAAb1Q,GAAyC,KAApBuQ,GAA6BvQ,IAAauQ,IACjED,EAAiB,2BACjBE,EAAmB,8BAM3B,OAHAnX,IAAMwH,WAAU,WACRgB,GAAMF,EAAQM,KAAK,QAGvB,eAAC+H,GAAA,EAAD,CAAK9P,UAAS,UAAKC,KAAQwE,aAAb,SAAd,UACI,sBAAKzE,UAAS,UAAKC,KAAQiV,eAA3B,UACI,qBAAKC,IAAG,UAAKC,IAAQC,IAAI,SACzB,cAACxQ,EAAA,EAAD,yBAEJ,eAACyQ,GAAA,EAAD,CAAOtV,UAAWC,KAAQC,QAA1B,UACI,cAAC4E,EAAA,EAAD,CACIrD,QAASkU,EACT5H,WAAY4H,EACZvQ,KAAK,QACLD,MAAM,aACNF,MAAOwQ,EACP9Q,QAAQ,WACRI,SA3Ec,SAACC,GAC3B,IAAIC,EAAQD,EAAEE,cAAcD,MAC5ByQ,EAAazQ,GACI2Q,EAAN,KAAV3Q,EAAkC,sBAA2C,OA0EtE,cAACH,EAAA,EAAD,CACIrD,QAASsU,EACThI,WAAYgI,EACZ3Q,KAAK,QACLD,MAAM,YACNF,MAAO4Q,EACPlR,QAAQ,WACRI,SA7Ea,SAACC,GAC1B,IAAIC,EAAQD,EAAEE,cAAcD,MAC5B6Q,EAAY7Q,GACK+Q,EAAN,KAAV/Q,EAAiC,sBAA0C,OA4EpE,cAACH,EAAA,EAAD,CACIrD,QAASwU,EACTlI,WAAYkI,EACZ7Q,KAAK,QACLD,MAAM,WACNF,MAAOyD,EACP/D,QAAQ,WACRI,SA/Ea,SAACC,GAC1B,IAAIC,EAAQD,EAAEE,cAAcD,MAC5B+P,EAAY/P,GACZ+P,EAAY/P,GACKiR,EAAN,KAAVjR,EAAiC,sBAA0C,OA6EpE,cAACH,EAAA,EAAD,CACIrD,QAAS0U,EACTpI,WAAYoI,EACZ/Q,KAAK,QACLxD,KAAK,WACLuD,MAAM,WACNF,MAAOa,EACPnB,QAAQ,WACRI,SAjFa,SAACC,GAC1B,IAAIC,EAAQD,EAAEE,cAAcD,MAC5BgQ,EAAYhQ,GACKmR,EAAN,KAAVnR,EAAiC,sBAA0C,KA+EhEyR,OAAQD,IAEZ,cAAC3R,EAAA,EAAD,CACIrD,QAAS8U,EACTxI,WAAYwI,EACZnR,KAAK,QACLxD,KAAK,WACLuD,MAAM,mBACNF,MAAOoR,EACP1R,QAAQ,WACRI,SArFoB,SAACC,GACjC,IAAIC,EAAQD,EAAEE,cAAcD,MAC5BqR,EAAmBrR,GACFuR,EAAN,KAAVvR,EAAwC,sBAAiD,KAmF9EyR,OAAQD,IAEZ,cAAC7Q,EAAA,EAAD,CAAQjB,QAAQ,YAAYJ,QAlFvB,WACbnE,EAAK2F,KAAK,iBAAkB,CAAE0P,YAAWI,WAAUnN,WAAU5C,WAAUuQ,oBAClE9T,MAAK,SAAAtB,GACEA,EAASO,KAAKC,OAAO+T,EAAOvU,EAASO,KAAKC,QAC7CR,EAASO,KAAKC,OAASgG,EAAQM,KAAK,cA8ErC,sBACA,mBAAGxD,QAAS,kBAAMkD,EAAQM,KAAK,WAA/B,4BC1HD4O,GATI,WACf,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOhC,OAAK,EAACC,KAAK,SAASpF,UAAWoH,KACtC,cAAC,IAAD,CAAOjC,OAAK,EAACC,KAAK,YAAYpF,UAAW+F,KACzC,cAAC,IAAD,CAAOX,KAAK,IAAIpF,UAAWsF,S,uCCRxB+B,gBAAY,CACzBC,WAAY,CACVC,WAAY,CAAC,aAAaC,KAAK,MAEjCC,QAAS,CACP7S,QAAS,CACP8S,KAAMC,KAAK,MAEbC,UAAW,CACTF,KAAM,cCJGG,GAJe,SAAC,GAAkB,IAAhB1X,EAAe,EAAfA,SAC7B,OAAO,eAAC2X,GAAA,EAAD,CAAeC,MAAOA,GAAtB,UAA6B,cAACC,GAAA,EAAD,IAAgB7X,M,UCOzC8X,GAVM,SAAC,GAAgB,IAAf9X,EAAc,EAAdA,SACnB,OACI,eAAC,KAAD,WACQ,cAAC,KAAD,UACI,8CAEHA,M,SCSX+X,GAAe,CACjBxD,gBAAgB,EAChBpF,KAAM,GACN3D,WAAY,KACZ1J,MAAO,GACP4J,mBAAmB,EACnBuE,sBAAsB,EACtByD,aAAc,GACdY,iBAAiB,EACjB9C,YAAa,GAuCFwG,GArCI,WAAmC,IAAlCrY,EAAiC,uDAAzBoY,GAAcE,EAAW,uCACjD,OAAQA,EAAOhW,MACX,KAAK0I,GACD,OAAO,2BAAKhL,GAAZ,IAAmB4U,gBAAgB,IACvC,KAAK1J,GACD,OAAO,2BAAKlL,GAAZ,IAAmB4U,gBAAgB,IACvC,KAAKjF,GACD,OAAO,2BAAK3P,GAAZ,IAAmB2U,gBAAiB2D,EAAO1V,UAC/C,KAAKkI,GACD,OAAO,2BAAK9K,GAAZ,IAAmBwP,KAAM8I,EAAO1V,UACpC,KAAK0M,GACD,OAAO,2BAAKtP,GAAZ,IAAmB+T,aAAcuE,EAAO1V,UAC5C,KAAKwI,GACD,OAAO,2BAAKpL,GAAZ,IAAmB6L,WAAYyM,EAAO1V,UAC1C,KAAKgI,GACD,OAAO,eAAK5K,GAChB,KAAK0K,GACD,OAAO,2BAAK1K,GAAZ,IAAmB+L,kBAAmBuM,EAAO1V,UACjD,KAAKwM,GACD,OAAO,2BAAKpP,GAAZ,IAAmB6L,WAAY,KAAME,mBAAmB,IAC5D,KAAK8I,GACD,OAAO,2BAAK7U,GAAZ,IAAmBsQ,qBAAsBgI,EAAO1V,UACpD,KAAK0O,GACD,OAAO,2BAAKtR,GAAZ,IAAmB6L,WAAYyM,EAAO1V,QAAS0N,sBAAsB,IACzE,KAAKF,GACD,OAAO,2BAAKpQ,GAAZ,IAAmB6L,WAAY,KAAMyE,sBAAsB,IAC/D,KAAKc,GACD,OAAO,2BAAKpR,GAAZ,IAAmB6L,WAAYyM,EAAO1V,QAASmJ,mBAAmB,IACtE,KAAK/B,GACD,OAAO,2BAAKhK,GAAZ,IAAmB6L,WAAY,KAAME,mBAAmB,IAC5D,KAAK4F,GACD,OAAO,2BAAK3R,GAAZ,IAAmB6R,YAAayG,EAAO1V,UAC3C,QACI,OAAO5C,IC5DNuY,GAAc,cCSrBH,GAAe,CACjB5Q,qBAAqB,EACrB9D,UAAW,GACXM,kBAAmB,GACnBsD,eAAgB,KAChBvD,sBAAsB,EACtB5B,MAAO,GACPqW,mBAAmB,EACnBC,qBAAsB,MAyBXC,GAvBQ,WAAoC,IAAnC1Y,EAAkC,uDAA1BoY,GAAcO,EAAY,uCACtD,OAAQA,EAAQrW,MACZ,KAAKF,EACD,OAAO,2BAAKpC,GAAZ,IAAmBwH,qBAAqB,IAC5C,KAAKjF,EACD,OAAO,2BAAKvC,GAAZ,IAAmBwH,qBAAqB,IAC5C,KAAK+Q,GACD,OAAO,2BAAKvY,GAAZ,IAAmB0D,UAAWiV,EAAQ/V,UAC1C,KAAKC,EACD,OAAO,2BAAK7C,GAAZ,IAAmBmC,MAAOwW,EAAQ/V,UACtC,KAAKH,EACD,OAAO,2BAAKzC,GAAZ,IAAmBsH,eAAgBqR,EAAQ/V,UAC/C,KAAKU,EACD,OAAO,2BAAKtD,GAAZ,IAAmB+D,qBAAsB4U,EAAQ/V,UACrD,KAAKY,EACD,OAAO,2BAAKxD,GAAZ,IAAmBgE,kBAAmB2U,EAAQ/V,UAClD,KAAK+D,GACD,OAAO,2BAAK3G,GAAZ,IAAmBwY,kBAAmBG,EAAQ/V,UAClD,QACI,OAAO5C,ICtCN4Y,GAAgB,gBCAhBC,GAAe,eCItBT,GAAe,CACjBU,eAAe,EACf3Y,aAAc,MAeH4Y,GAbI,WAAmC,IAAlC/Y,EAAiC,uDAAzBoY,GAAcE,EAAW,uCACjD,OAAQA,EAAOhW,MACX,KAAKuW,GACD,OAAO,2BAAK7Y,GAAZ,IAAmB8Y,eAAe,IACtC,KAAKF,GACD,OAAO,2BAAK5Y,GAAZ,IAAmB8Y,eAAe,IACtC,KAAKhR,GACD,OAAO,2BAAK9H,GAAZ,IAAmBG,aAAcmY,EAAO1V,UAC5C,QACI,OAAO,eAAK5C,KCPTgZ,GANKC,aAAgB,CAChCnN,IAAKuM,GACLxU,QAAS6U,GACTxY,IAAI6Y,K,oBCHFG,GAASC,wBAAa,CAAEC,MAAO,QAC/BC,GAAc,CAAEC,KAAMJ,IACbK,gBAAYP,GAAaQ,KAAe,WAAf,EAAmBH,KCE5CI,GANO,SAAC,GAAkB,IAAhBpZ,EAAe,EAAfA,SACrB,OAAO,cAAC,IAAD,CAAUqZ,MAAOA,GAAjB,SACFrZ,KC0BMsZ,OArBf,WACE,OACE,mCACE,cAAC,GAAD,UACE,eAAC,GAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,UACE,cAAC,EAAD,UACE,cAAC,GAAD,UACI,cAAC,IAAD,UACE,cAAC,GAAD,oBCPLC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB7W,MAAK,YAAkD,IAA/C8W,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,M,mBCdAla,EAAOC,QAAU,CAAC,aAAe,0CAA0C,aAAe,0CAA0C,eAAiB,8C,mBCArJD,EAAOC,QAAU,CAAC,aAAe,0CAA0C,aAAe,0CAA0C,eAAiB,+C","file":"static/js/main.8cc4b54b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"sidebar_wrapper__15K6k\",\"hidden\":\"sidebar_hidden__gLZCh\",\"show\":\"sidebar_show__cmkqc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_wrapper\":\"login_main_wrapper__3-u7r\",\"wrapper\":\"login_wrapper__25wzd\",\"brand_wrapper\":\"login_brand_wrapper__2WTU8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_wrapper\":\"register_main_wrapper__2P3bz\",\"wrapper\":\"register_wrapper__i8cgU\",\"brand_wrapper\":\"register_brand_wrapper__3Ciej\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_wrapper\":\"newJobDialogBox_main_wrapper__2LAUU\",\"actionWrapper\":\"newJobDialogBox_actionWrapper__3b_fj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"header_wrapper__2xztP\",\"addNewBtn\":\"header_addNewBtn__1gYiW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"loadingSpinner_wrapper__2B9kq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"content_wrapper__1Xpdj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content_wrapper\":\"app_content_wrapper__170RZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"table_wrapper__ziDrt\",\"cell\":\"table_cell__1XAhc\",\"th\":\"table_th__FPD0d\",\"td\":\"table_td__27OyA\",\"opt_cell\":\"table_opt_cell__xQNra\",\"loadingWrapper\":\"table_loadingWrapper__3dI4T\"};","import Snackbar from \"@mui/material/Snackbar\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport const SnackbarContext = React.createContext(\"\");\r\nconst SnackbarProvider = (props) => {\r\n    // const [message, setMessage] = React.useState(\"\");\r\n    // const notify = (message) => {\r\n    //     setMessage(message);\r\n    //     setTimeout(() => setMessage(\"\"), 7000)\r\n    // }\r\n    return (\r\n        <>\r\n            {/* <SnackbarContext.Provider value={{ notify }}> */}\r\n            {props.children}\r\n            <Snackbar open={!!props.message} autoHideDuration={6000} message={props.message} />\r\n            {/* </SnackbarContext.Provider> */}\r\n        </>\r\n    )\r\n}\r\nconst mapStateToProps = state => ({ message: state.APP.notification })\r\nexport default connect(mapStateToProps)(SnackbarProvider);","export default {\r\n    localStorageCurrCompId:\"catalogCurrComp\"\r\n}","import CircularProgress from '@mui/material/CircularProgress';\r\nimport classes from './loadingSpinner.module.scss';\r\nconst LoadingSpinner = () => {\r\n    return (\r\n        <div className={`${classes.wrapper}`}>\r\n            <CircularProgress />\r\n        </div>\r\n    )\r\n}\r\nexport default LoadingSpinner;","import axios from \"axios\";\r\nconst http = axios.create({ baseURL: process.env.REACT_APP_API_URL || \"http://localhost:8080/api\" })\r\n\r\nhttp.interceptors.request.use(request => {\r\n    let accessToken = localStorage.getItem(\"JPtechSolutionAccessToken\");\r\n    if (accessToken) request.headers.authorization = `Bearer ${accessToken}`\r\n    return request\r\n})\r\nhttp.interceptors.response.use(response => {\r\n    let accessToken = response.headers['authorization'];\r\n    if (accessToken) localStorage.setItem(\"JPtechSolutionAccessToken\", accessToken.split(\" \")[1])\r\n    return response\r\n})\r\n\r\nexport default http;","import http from '../../util/axios';\r\nconst getCompanyById = async (id) => {\r\n    try {\r\n        let { data } = await http.get(`/company/${id}`);\r\n        if (data.error) return { error: data.error }\r\n        return data;\r\n    } catch (e) {\r\n        return { error: e.message }\r\n    }\r\n}\r\n\r\nexport default getCompanyById;","export const START_COMPANY_FETCHING = \"START COMPANY FETCHING\";\r\nconst startFetchingCompany =  () => ({ type: START_COMPANY_FETCHING })\r\nexport default startFetchingCompany;","\r\nexport const STOP_COMPANY_FETCHING = \"STOP COMPANY FETCHING\";\r\nconst stopFetchingCompany = () => ({ type: STOP_COMPANY_FETCHING })\r\nexport default stopFetchingCompany","\r\nexport const SET_CURRENT_COMPANY = \"SET CURRENT COMPANY\";\r\nconst setCurrentCompany = (company) => ({ type: SET_CURRENT_COMPANY, payload: company })\r\nexport default setCurrentCompany;","\r\nexport const SET_COMPANY_ERROR = \"SET COMPANY ERROR\";\r\nconst setCompanyError = (error) => ({ type: SET_COMPANY_ERROR, payload: error })\r\nexport default setCompanyError;","import getCompanyById from \"../../api/getCompanyById\";\r\nimport startFetchingCompany from \"../actions/startFetchingCompany\";\r\nimport stopFetchingCompany from \"../actions/stopFetchingCompany\";\r\nimport setCurrentCompany from '../actions/setCurrentCompany';\r\nimport setCompanyError from \"../actions/setCompanyError\";\r\n\r\nconst handleSetCurrentCompany = id => dispatch => {\r\n    dispatch(startFetchingCompany())\r\n    getCompanyById(id)\r\n    .then(response => {\r\n            let { error } = response;\r\n            if (error) return dispatch(setCompanyError(error));\r\n            return dispatch(setCurrentCompany(response.result));\r\n        })\r\n        .finally(() => {\r\n            dispatch(stopFetchingCompany())\r\n        })\r\n};\r\n\r\nexport default handleSetCurrentCompany;","import http from '../../util/axios';\r\nconst searchCompanies = async (query) => {\r\n    try {\r\n        let { data } = await http.get(`/company/search?q=${query}`);\r\n        if (data.error) return { error: data.error }\r\n        return data;\r\n    } catch (e) {\r\n        return { error: e.message }\r\n    }\r\n}\r\n\r\nexport default searchCompanies;","export const SET_SEARCHING_COMPANIES = \"SET COMPANIES SEARCHING\";\r\nconst setIsSearchingCompanies = state => ({ type: SET_SEARCHING_COMPANIES, payload: state })\r\nexport default setIsSearchingCompanies;","export const SET_SEARCHED_COMPANIES = \"SET SEARCHED COMPANIES\";\r\nconst setSearchedCompanies = (companies) => ({ type: SET_SEARCHED_COMPANIES, payload: companies })\r\nexport default setSearchedCompanies;","import React from 'react';\r\nimport Typography from '@mui/material/Typography';\r\nimport Card from '@mui/material/Card';\r\nimport TextField from '@mui/material/TextField';\r\nimport classes from './companySelectDialog.module.scss';\r\nimport Button from '@mui/material/Button';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport List from '@mui/material/List';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport ListItemText from '@mui/material/ListItemText';\r\n// import CustomDropdown from '../../shared/Dropdown';\r\nimport { connect } from 'react-redux';\r\n// import searchCompanies from '../api/searchCompanies';\r\nimport { ClickAwayListener, Popper } from '@mui/material';\r\nimport config from '../../config';\r\nimport handleSetCurrentCompany from '../redux/middlewares/handleSetCurrentCompany';\r\nimport handleSearchCompanies from '../redux/middlewares/handleSearchCompanies'\r\nconst CompanySelectionDialog = (props) => {\r\n    // const [searchResults, setSearchResults] = React.useState([]);\r\n    const [textFieldRef, setTextFieldRef] = React.useState(false);\r\n    const handleSearchResultClose = () => setTextFieldRef(false);\r\n    const handleCompanySearch = (e) => {\r\n        let value = e.currentTarget.value;\r\n        // searchCompanies(value).then(response => setSearchResults(response.result))\r\n        props.handleSearchCompanies(value)\r\n        if (value) setTextFieldRef(e.currentTarget);\r\n    };\r\n    const handleCompanyClick = (company) => {\r\n        localStorage.setItem(config.localStorageCurrCompId, company._id);\r\n        handleSearchResultClose();\r\n        props.handleSetCurrentCompany(company._id)\r\n    }\r\n    const ResultList = (props) => {\r\n        return (\r\n            <List>\r\n                {props.isLoading && <ListItem key={\"searching\"} disablePadding><ListItemButton><ListItemText primary=\"searching...\" /></ListItemButton></ListItem>}\r\n                {\r\n                    props.searchedCompanies.map(company => {\r\n                        return (\r\n                            <ListItem key={company._id} disablePadding>\r\n                                <ListItemButton>\r\n                                    <ListItemText primary={company.name} onClick={(_) => handleCompanyClick(company)} />\r\n                                </ListItemButton>\r\n                            </ListItem>\r\n                        )\r\n                    })\r\n                }\r\n            </List>\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n            <div className={`${classes.main_wrapper}`}>\r\n                <Card variant=\"outlined\" className={`${classes.card_wrapper} p-md`}>\r\n                    <Typography variant=\"h5\">Select Company</Typography>\r\n                    <Typography variant=\"subtitle\">We were not able to identify the company you are trying to access. please select on of the company</Typography>\r\n                    <TextField onChange={handleCompanySearch} label=\"Search Company\" variant=\"outlined\" size=\"small\" />\r\n                    {/* <CustomDropdown onClose={handleSearchResultClose} el={textFieldRef} content={<ResultList />} /> */}\r\n                    <ClickAwayListener onClickAway={handleSearchResultClose}>\r\n                        <Popper placement=\"bottom-start\" open={Boolean(textFieldRef)} anchorEl={textFieldRef}>\r\n                            <Card>\r\n                                <ResultList isLoading={props.isLoading} searchedCompanies={props.searchedCompanies} />\r\n                            </Card>\r\n                        </Popper>\r\n                    </ClickAwayListener>\r\n                    <div className={`${classes.action_wrapper}`}>\r\n                        <Button onClick={props.createCompany} >Create</Button>\r\n                        <Button variant=\"contained\">Select</Button>\r\n                    </div>\r\n                </Card>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nconst mapStateToProps = state => ({ companies: state.COMPANY.companies, isLoading: state.COMPANY.isSearchingCompanies, searchedCompanies: state.COMPANY.searchedCompanies });\r\nconst mapDispatchToProps = { handleSetCurrentCompany, handleSearchCompanies };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CompanySelectionDialog);","import searchCompanies from \"../../api/searchCompanies\";\r\nimport setCompanyError from \"../actions/setCompanyError\";\r\nimport setIsSearchingCompanies from \"../actions/setIsSearchingCompanies\";\r\nimport setSearchedCompanies from \"../actions/setSearchedCompanies\";\r\n\r\nconst handleSearchCompanies = query => async dispatch => {\r\n    dispatch(setIsSearchingCompanies(true))\r\n    let response = await searchCompanies(query);\r\n    if (response.error) dispatch(setCompanyError(response.error))\r\n    if (response.result) dispatch(setSearchedCompanies(response.result))\r\n    dispatch(setIsSearchingCompanies(false))\r\n\r\n}\r\n\r\nexport default handleSearchCompanies;","import http from '../../util/axios';\r\nconst createCompany = async (name, password) => {\r\n    try {\r\n        const response = await http.post('/company', { name, password })\r\n        if (response.data.error) return { error: response.data.error }\r\n        return response.data;\r\n    } catch (e) {\r\n        return { error: e.message }\r\n    }\r\n}\r\n\r\nexport default createCompany;","export const SET_COMPANY_CREATION_ERROR = \"SET COMPANY CREATION ERROR\";\r\nconst setCompanyCreationError = (error) => ({ type: SET_COMPANY_CREATION_ERROR, payload: error })\r\nexport default setCompanyCreationError;","export const SET_IS_CREATING_COMPANY = \"SET IS CREATING COMPANY\";\r\nconst setIsCreatingCompany = (state) => ({ type: SET_IS_CREATING_COMPANY, payload: state })\r\nexport default setIsCreatingCompany;","import React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Typography from '@mui/material/Typography';\r\nimport classes from './createCompanyDialog.module.scss';\r\nimport handleCreateCompany from '../redux/middlewares/handleCreateCompany';\r\nimport { connect } from 'react-redux';\r\nconst CreateCompanyDialog = (props) => {\r\n    const [companyName, setCompanyName] = React.useState(\"\");\r\n    const [companyPassword, setCompanyPassword] = React.useState(\"\");\r\n    const handleCompanyNameChange = (e) => {\r\n        let value = e.currentTarget.value;\r\n        setCompanyName(value);\r\n    }\r\n    const handleCompanyPasswordChange = (e) => {\r\n        let value = e.currentTarget.value;\r\n        setCompanyPassword(value)\r\n    }\r\n    return (\r\n        <>\r\n            <div className={`${classes.main_wrapper}`}>\r\n                <Card variant=\"outlined\" className={`${classes.card_wrapper} p-md`}>\r\n                    <Typography variant=\"h5\">Create Company</Typography>\r\n                    <Typography variant=\"subtitle\">Create a new company to start cataloging</Typography>\r\n                    <TextField value={companyName} onChange={handleCompanyNameChange} label=\"Companies Name\" variant=\"outlined\" size=\"small\" />\r\n                    <TextField value={companyPassword} onChange={handleCompanyPasswordChange} label=\"Companies Password\" type=\"password\" variant=\"outlined\" size=\"small\" />\r\n                    <div className={`${classes.action_wrapper}`}>\r\n                        <Button onClick={props.goBack} >Back</Button>\r\n                        <Button variant=\"contained\" onClick={() => props.handleCreateCompany({ name: companyName, password: companyPassword })}>Create</Button>\r\n                    </div>\r\n                </Card>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nconst mapDispatchToProps = {\r\n    handleCreateCompany\r\n}\r\nexport default connect(null, mapDispatchToProps)(CreateCompanyDialog);","import createCompany from \"../../api/createCompany\";\r\nimport setCompanyCreationError from \"../actions/setCompanyCreationError\";\r\nimport setCurrentCompany from \"../actions/setCurrentCompany\";\r\nimport setIsCreatingCompany from \"../actions/setIsCreatingCompany\";\r\nimport config from \"../../../config\";\r\nconst handleCreateCompany = ({ name, password }) => async dispatch => {\r\n    dispatch(setIsCreatingCompany(true))\r\n    let response = await createCompany(name, password);\r\n    if (response.error) dispatch(setCompanyCreationError(response.error))\r\n    if (!response.error) {\r\n        localStorage.setItem(config.localStorageCurrCompId, response._id);\r\n        dispatch(setCurrentCompany(response))\r\n    }\r\n    dispatch(setIsCreatingCompany(false))\r\n\r\n}\r\n\r\nexport default handleCreateCompany;","import React from \"react\"\r\nimport { connect } from \"react-redux\";\r\nimport config from \"../config\";\r\nimport LoadingSpinner from '../shared/LoadingSpinner';\r\nimport CompanySelectionDialog from \"./CompanySelectDialog\";\r\nimport CreateCompanyDialog from \"./CreateCompanyDialog\";\r\nimport handleSetCurrentCompany from \"./redux/middlewares/handleSetCurrentCompany\";\r\n// import setCompany from './redux/middlewares/setCompany';\r\nexport const CompanyContext = React.createContext(null);\r\nconst CompanyProvider = (props) => {\r\n    const [isCreateCompany, setIsCreateCompany] = React.useState(false);\r\n    React.useEffect(() => {\r\n        if(props.currentCompany) setIsCreateCompany(false)\r\n    }, [props.currentCompany])\r\n    React.useEffect(() => {\r\n        let currentCompanyId = localStorage.getItem(config.localStorageCurrCompId);\r\n        if (currentCompanyId && !props.currentCompany && !props.isFetchingCompanies) props.handleSetCurrentCompany(currentCompanyId);\r\n        //     if (!props.error && !props.isFetchingCompanies) props.handleSetCompanies();\r\n    }, [])\r\n    if (props.isFetchingCompanies) return <LoadingSpinner />\r\n    if (props.error) return <h1>There is a company error</h1>\r\n    if (isCreateCompany) return <CreateCompanyDialog goBack={() => setIsCreateCompany(false)} />\r\n    if (!props.currentCompany) return <CompanySelectionDialog createCompany={() => setIsCreateCompany(true)} />\r\n    // if (!props.currentCompany) {\r\n    //     let currentCompanyId = localStorage.getItem(config.localStorageCurrCompId);\r\n    //     if (!currentCompanyId) return <CompanySelectionDialog/>\r\n    // }\r\n    return <>{props.children}</>\r\n}\r\nconst mapStateToProps = (state) => ({ ...state.COMPANY })\r\nconst mapDispatchToProps = { handleSetCurrentCompany }\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CompanyProvider);","import React from \"react\";\r\nimport CompanyProvider from '../company/provider';\r\nexport const AppContext = React.createContext({});\r\nconst AppProvider = ({ children }) => {\r\n    const [isSidebarOpen, setIsSidebarOpen] = React.useState(false);\r\n    return (\r\n        <AppContext.Provider value={{ isSidebarOpen, setIsSidebarOpen }}>\r\n            <CompanyProvider>\r\n                {children}\r\n            </CompanyProvider>\r\n        </AppContext.Provider>\r\n    )\r\n}\r\nexport default AppProvider;","export const SET_NOTIFICATION = \"SET NOTIFICATION\";\r\nconst setNotification = message => ({ type: SET_NOTIFICATION, payload: message })\r\nexport default setNotification;","import setNotification from \"../action/setNotification\";\r\n\r\nconst handleShowNotification = message => dispatch => {\r\n    dispatch(setNotification(message))\r\n    setTimeout(() => {\r\n        dispatch(setNotification(null))\r\n    }, 7000)\r\n}\r\n\r\nexport default handleShowNotification;","import React from \"react\"\r\nimport { connect } from 'react-redux'\r\nimport http from \"../util/axios\";\r\nimport LoadingSpinner from '../shared/LoadingSpinner';\r\nimport handleShowNotification from '../App/redux/middleware/handleShowNotification';\r\nimport { useHistory } from \"react-router\";\r\nexport const UserContext = React.createContext(null);\r\nconst UserProvider = (props) => {\r\n    const history = useHistory()\r\n    const [user, setUser] = React.useState(null);\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [error, setError] = React.useState(\"\");\r\n    React.useEffect(() => {\r\n        let accessToken = localStorage.getItem('JPtechSolutionAccessToken');\r\n        if (accessToken) {\r\n            http.get('/user/login', { headers: { authorization: `Bearer ${accessToken}` } })\r\n                .then(response => {\r\n                    if (response.data.error) {\r\n                        history.push('/login')\r\n                        props.handleShowNotification(response.data.error);\r\n                    }\r\n                    !response.data.error && setUser(response.data)\r\n                })\r\n                .finally(() => setIsLoading(false))\r\n                .catch(e => setError(e))\r\n        } else {\r\n            setIsLoading(false)\r\n        }\r\n    }, [])\r\n    if (isLoading) return <LoadingSpinner />\r\n    // if (error) return <h1>User Error</h1>\r\n    return <UserContext.Provider value={{ user, setUser, isUserLoading: isLoading, setIsUserLoading: setIsLoading }}>{props.children}</UserContext.Provider>\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    handleShowNotification\r\n}\r\nexport default connect(null, mapDispatchToProps)(UserProvider)","import React from \"react\";\r\nimport { UserContext } from \"../../UserProvider\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport { useHistory } from \"react-router\";\r\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\n\r\nconst UserWidget = ({ children, className, ...props }) => {\r\n    const { user, setUser } = React.useContext(UserContext);\r\n    const history = useHistory()\r\n    const handleProfileClick = ()=>history.push('/profile')\r\n    const handleMenuClick = (event) => {\r\n        if (!user) return history.push('/login');\r\n        setAnchorEl(event.currentTarget)\r\n    }\r\n    const handleLogoutClick = () => {\r\n        setUser(null)\r\n        localStorage.removeItem(\"JPtechSolutionAccessToken\");\r\n    }\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n    const handleMenuClose = () => setAnchorEl(null);\r\n    return (\r\n        <div  {...props}>\r\n            <IconButton onClick={handleMenuClick}>\r\n                <AccountCircleIcon />\r\n            </IconButton>\r\n            <Menu anchorEl={anchorEl} open={open} onClose={handleMenuClose}>\r\n                {user && <MenuItem onClick={handleProfileClick}>{user.username}</MenuItem>}\r\n                <MenuItem onClick={handleLogoutClick}>Logout</MenuItem>\r\n            </Menu>\r\n        </div>\r\n    )\r\n}\r\nexport default UserWidget;","import React from 'react';\r\nimport { AppContext } from '../App/AppProvider';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport UserWidget from './UserWidget';\r\nimport { connect } from 'react-redux';\r\nconst Header = (props) => {\r\n    const { setIsSidebarOpen, isSidebarOpen } = React.useContext(AppContext);\r\n    return (\r\n        <AppBar position=\"static\" color=\"primary\">\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={() => setIsSidebarOpen(!isSidebarOpen)}>\r\n                    <MenuIcon />\r\n                </IconButton>\r\n                <Typography variant=\"h6\" >\r\n                    {props.company.name}\r\n                </Typography>\r\n                <UserWidget style={{ marginLeft: \"auto\" }} />\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\nconst mapStateToProps = state => ({ company: state.COMPANY.currentCompany });\r\nexport default connect(mapStateToProps, null)(Header);","import React from 'react';\r\nimport classes from './sidebar.module.scss';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport { AppContext } from '../App/AppProvider';\r\nconst Sidebar = () => {\r\n    const { isSidebarOpen } = React.useContext(AppContext);\r\n    return (\r\n        <div className={`${classes.wrapper} ${isSidebarOpen ? classes.show : classes.hidden}`}>\r\n            <List>\r\n                <ListItem disablePadding>\r\n                    <ListItemButton>\r\n                        <ListItemText primary=\"Jobs\" />\r\n                    </ListItemButton>\r\n                </ListItem>\r\n            </List>\r\n        </div>\r\n    )\r\n}\r\nexport default Sidebar;","export const CLOSE_ADD_NEW_JOB_DIALOG = \"CLOSE UPDATE JOB DIALOG\";\r\nconst closeAddNewJobDialog = () => ({ type: CLOSE_ADD_NEW_JOB_DIALOG })\r\nexport default closeAddNewJobDialog;","import http from '../../util/axios';\r\nconst getJobs = async (company, { page, limit, skip } = {}) => {\r\n    try {\r\n        let options = { params: { company: company.name } };\r\n        if (page) options.params.page = page;\r\n        if (limit) options.params.limit = limit;\r\n        if (skip) options.params.skip = skip;\r\n        return await http.get(`/service`, options)\r\n    } catch (e) {\r\n        return { error: e.message }\r\n    }\r\n}\r\n\r\nexport default getJobs;","import http from '../../util/axios';\r\nconst updateJob = async (company,data) => {\r\n    try {\r\n        return await http.put(`/service?company=${company.name}`, data)\r\n    } catch (e) {\r\n        return { error: e.message }\r\n    }\r\n}\r\n\r\nexport default updateJob;","export const CHANGE_ADD_NEW_DIALOG_STATE = \"CHANGE ADD NEW DIALOG STATE\";\r\nconst changeAddNewJobDialogState = (state) => ({ type: CHANGE_ADD_NEW_DIALOG_STATE, payload: state })\r\nexport default changeAddNewJobDialogState;","\r\nexport const SET_JOB_ERROR = \"SET_JOB ERROR\";\r\nconst setJobError = (error) => ({ type: SET_JOB_ERROR, payload: error })\r\nexport default setJobError;","export const SET_JOBS = \"SET JOBS\";\r\nconst setJobs = (companies) => ({ type: SET_JOBS, payload: companies })\r\nexport default setJobs;","export const START_JOBS_FETCHING = \"START JOBS FETCHING\";\r\nconst startFetchingJobs =  () => ({ type: START_JOBS_FETCHING })\r\nexport default startFetchingJobs;","export const STOP_JOBS_FETCHING = \"STOP JOBS FETCHING\";\r\nconst stopFetchingJobs =  () => ({ type: STOP_JOBS_FETCHING })\r\nexport default stopFetchingJobs;","export const UPDATE_CURRENT_JOB = \"UPDATE CURRENT JOB\";\r\nconst updateCurrentJob = (companies) => ({ type: UPDATE_CURRENT_JOB, payload: companies })\r\nexport default updateCurrentJob;","import getJobs from \"../../api/getJobs\";\r\nimport updateJob from \"../../api/updateJob\";\r\nimport changeAddNewJobDialogState from \"../action/changeAddNewJobDialogState\";\r\nimport setJobError from \"../action/setJobError\";\r\nimport setJobs from \"../action/setJobs\";\r\nimport startFetchingJobs from \"../action/startJobsFetching\";\r\nimport stopFetchingJobs from \"../action/stopJobsFetching\";\r\nimport updateCurrentJob from \"../action/updateCurrentJob\";\r\nconst handleUpdateJob = (company, updatedJobDetails) => async (dispatch) => {\r\n    dispatch(startFetchingJobs())\r\n    let response = await updateJob(company, updatedJobDetails);\r\n    if(response.error) dispatch(setJobError(response.error))\r\n    dispatch(changeAddNewJobDialogState(false))\r\n    if (!response.error) {\r\n        let getJobsResponse = await getJobs(company)\r\n        dispatch(setJobs(getJobsResponse.data.result));\r\n        dispatch(updateCurrentJob(null))\r\n    }\r\n    dispatch(stopFetchingJobs())\r\n\r\n}\r\n\r\nexport default handleUpdateJob;","import http from '../../util/axios';\r\nconst addJob = async (company,data) => {\r\n    try {\r\n        return await http.post(`/service?company=${company.name}`, data)\r\n    } catch (e) {\r\n        return { error: e.message }\r\n    }\r\n}\r\n\r\nexport default addJob;","import addJob from \"../../api/addJob\";\r\nimport getJobs from \"../../api/getJobs\";\r\nimport changeAddNewJobDialogState from \"../action/changeAddNewJobDialogState\";\r\nimport setJobError from \"../action/setJobError\";\r\nimport setJobs from \"../action/setJobs\";\r\nimport startFetchingJobs from \"../action/startJobsFetching\";\r\nimport stopFetchingJobs from \"../action/stopJobsFetching\";\r\nimport updateCurrentJob from \"../action/updateCurrentJob\";\r\nconst handleAddJob = (company, newJob) => async (dispatch) => {\r\n    dispatch(startFetchingJobs())\r\n    let response = await addJob(company, newJob);\r\n    if (response.error) dispatch(setJobError(response.error))\r\n    dispatch(changeAddNewJobDialogState(false))\r\n    if (!response.error) {\r\n        let getJobsResponse = await getJobs(company)\r\n        dispatch(setJobs(getJobsResponse.data.result));\r\n        dispatch(updateCurrentJob(null))\r\n    }\r\n    dispatch(stopFetchingJobs())\r\n\r\n}\r\n\r\nexport default handleAddJob;","import React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport moment from \"moment\";\r\nimport classes from './newJobDialogBox.module.scss'\r\nimport closeAddNewJobDialog from '../redux/action/closeAddNewJobDialog';\r\nimport handleUpdateJob from '../redux/middleware/handleUpdateJob'\r\nimport handleAddJob from '../redux/middleware/handleAddJob';\r\nimport { connect } from 'react-redux';\r\n\r\nconst NewJobDialogBox = ({ open, handleClose, createJob, selected, updateJob, isUpdate, currentJob, ...props }) => {\r\n    // customer\r\n    const [customerName, setCustomerName] = React.useState('');\r\n    const [customerNameError, setCustomerNameError] = React.useState(\"\");\r\n    const [serialNumber, setSerialNumber] = React.useState('');\r\n    const handleCustomerNameChange = (e) => {\r\n        let value = e.currentTarget.value;\r\n        (value === \"\") ? setCustomerNameError(\"Should not be empty\") : setCustomerNameError(\"\");\r\n        setCustomerName(value);\r\n    }\r\n    // model\r\n    const [model, setModel] = React.useState('')\r\n    const [modelError, setModelError] = React.useState('')\r\n    const handleModelChange = (e) => {\r\n        let value = e.currentTarget.value;\r\n        (value === \"\") ? setModelError(\"Should not be empty\") : setModelError(\"\");\r\n        setModel(value);\r\n    }\r\n    // issue\r\n    const [issues, setIssues] = React.useState('')\r\n    const [issueError, setIssueError] = React.useState('')\r\n    const handleIssueChange = (e) => {\r\n        let value = e.currentTarget.value;\r\n        (value === \"\") ? setIssueError(\"Should not be empty\") : setIssueError(\"\");\r\n        setIssues(value);\r\n    }\r\n    // brand\r\n    const [brand, setBrand] = React.useState('')\r\n    const [brandError, setBrandError] = React.useState('')\r\n    const handleBrandChange = (e) => {\r\n        let value = e.currentTarget.value;\r\n        (value === \"\") ? setBrandError(\"Should not be empty\") : setBrandError(\"\");\r\n        setBrand(value);\r\n    }\r\n    //status\r\n    const [status, setStatus] = React.useState(false);\r\n    const handleStatusChange = (e) => {\r\n        let value = e.target.value;\r\n        if (value === 'resolved') return setStatus(true)\r\n        setStatus(false)\r\n    };\r\n    // amount\r\n    const [amount, setAmount] = React.useState('')\r\n    const [amountError, setAmountError] = React.useState('')\r\n    const handleAmountChange = (e) => {\r\n        let value = e.currentTarget.value;\r\n        (value === \"\") ? setAmountError(\"Should not be empty\") : setAmountError(\"\");\r\n        setAmount(value);\r\n    }\r\n    const [receivedDate, setReceivedDate] = React.useState(`${moment().format(\"YYYY\")}-${moment().format(\"MM\")}-${moment().format(\"DD\")}`);\r\n    const [returnedDate, setReturnedDate] = React.useState(`${moment().format(\"YYYY\")}-${moment().format(\"MM\")}-${moment().format(\"DD\")}`);\r\n    const [detailedDescription, setDetailedDescription] = React.useState('');\r\n    const handleReceivedDateChange = (e) => setReceivedDate(e.target.value);\r\n    const handleReturnedDateChange = (e) => setReturnedDate(e.target.value);\r\n    const resetInputs = () => {\r\n        setCustomerName(\"\")\r\n        setSerialNumber(\"\")\r\n        setModel(\"\")\r\n        setIssues(\"\")\r\n        setBrand(\"\")\r\n        setStatus(false)\r\n        setAmount(\"\")\r\n        setReceivedDate(`${moment().format(\"YYYY\")}-${moment().format(\"MM\")}-${moment().format(\"DD\")}`)\r\n        setReturnedDate(`${moment().format(\"YYYY\")}-${moment().format(\"MM\")}-${moment().format(\"DD\")}`)\r\n        setDetailedDescription(\"\")\r\n    }\r\n    const handleSubmit = () => {\r\n        if (currentJob) {\r\n            handleJobUpdate().then(() => resetInputs());\r\n        } else {\r\n            handleJobCreate().then(() => resetInputs());\r\n        }\r\n    }\r\n    const handleDialogClose = () => {\r\n        resetInputs();\r\n        handleClose();\r\n    }\r\n    const handleJobCreate = () => props.handleAddJob(props.company, { customerName, serialNumber, model, issues, brand, status, amount, receivedDate, returnedDate, detailedDescription });\r\n    const handleJobUpdate = () => props.handleUpdateJob(props.company, { id: currentJob._id, customerName, serialNumber, model, issues, brand, status, amount, receivedDate, returnedDate, detailedDescription });\r\n    React.useEffect(() => {\r\n        if (currentJob) {\r\n            setCustomerName(currentJob.customerName);\r\n            setSerialNumber(currentJob.serialNumber);\r\n            setModel(currentJob.model);\r\n            setIssues(currentJob.issues);\r\n            setBrand(currentJob.brand);\r\n            setStatus(currentJob.status);\r\n            setAmount(currentJob.amount);\r\n            setReceivedDate(`${moment(currentJob.receivedDate).format('YYYY')}-${moment(currentJob.receivedDate).format(\"MM\")}-${moment(currentJob.receivedDate).format(\"DD\")}`);\r\n            setReturnedDate(`${moment(currentJob.returnedDate).format(\"YYYY\")}-${moment(currentJob.returnedDate).format(\"MM\")}-${moment(currentJob.returnedDate).format(\"DD\")}`);\r\n            setDetailedDescription(currentJob.detailedDescription);\r\n        }\r\n    }, [currentJob])\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth={true}\r\n            onClose={handleDialogClose}\r\n        >\r\n            <div className={`${classes.main_wrapper}`}>\r\n                <TextField\r\n                    error={!!customerNameError}\r\n                    helperText={customerNameError}\r\n                    size=\"small\"\r\n                    value={customerName}\r\n                    onChange={handleCustomerNameChange}\r\n                    label=\"Customer Name\"\r\n                    variant=\"outlined\"\r\n                />\r\n                <TextField\r\n                    size=\"small\"\r\n                    value={serialNumber}\r\n                    onChange={e => setSerialNumber(e.target.value)}\r\n                    label=\"Serial Number\"\r\n                    variant=\"outlined\"\r\n                    type=\"number\"\r\n                />\r\n                <TextField\r\n                    error={!!modelError}\r\n                    helperText={modelError}\r\n                    size=\"small\"\r\n                    value={model}\r\n                    onChange={handleModelChange}\r\n                    label=\"Model\"\r\n                    variant=\"outlined\"\r\n                />\r\n                <TextField\r\n                    error={!!issueError}\r\n                    helperText={issueError}\r\n                    size=\"small\"\r\n                    value={issues}\r\n                    onChange={handleIssueChange}\r\n                    label=\"Issues\"\r\n                    variant=\"outlined\"\r\n                />\r\n                <TextField\r\n                    error={!!brandError}\r\n                    helperText={brandError}\r\n                    size=\"small\"\r\n                    value={brand}\r\n                    onChange={handleBrandChange}\r\n                    label=\"Brand\"\r\n                    variant=\"outlined\"\r\n                />\r\n                <FormControl variant=\"outlined\" size=\"small\">\r\n                    <InputLabel id=\"demo-simple-select-outlined-label\">Status</InputLabel>\r\n                    <Select\r\n                        value={status === true ? \"resolved\" : \"returned\"}\r\n                        onChange={handleStatusChange}\r\n                    >\r\n                        <MenuItem value=\"resolved\">Resolved</MenuItem>\r\n                        <MenuItem value=\"returned\">Return</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n                <TextField\r\n                    error={!!amountError}\r\n                    helperText={amountError}\r\n                    type=\"number\"\r\n                    size=\"small\"\r\n                    value={amount}\r\n                    onChange={handleAmountChange}\r\n                    label=\"Amount\"\r\n                    variant=\"outlined\"\r\n                />\r\n                <TextField\r\n                    id=\"date\"\r\n                    label=\"Received Date\"\r\n                    type=\"date\"\r\n                    defaultValue={receivedDate}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    onChange={handleReceivedDateChange}\r\n                />\r\n                <TextField\r\n                    id=\"date\"\r\n                    label=\"Returned Date\"\r\n                    type=\"date\"\r\n                    defaultValue={returnedDate}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    onChange={handleReturnedDateChange}\r\n                />\r\n                <TextField\r\n                    value={detailedDescription}\r\n                    onChange={e => setDetailedDescription(e.target.value)}\r\n                    size=\"small\"\r\n                    label=\"Detailed Description\"\r\n                    multiline\r\n                    variant=\"outlined\"\r\n                />\r\n                <div className={classes.actionWrapper}>\r\n                    <Button\r\n                        onClick={handleDialogClose}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                    <Button\r\n                        disabled={!!(modelError || customerNameError || issueError || amountError)}\r\n                        variant=\"contained\"\r\n                        onClick={handleSubmit}\r\n                    >\r\n                        {currentJob ? \"Update\" : \"Add New Job\"}\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    company: state.COMPANY.currentCompany,\r\n    currentJob: state.JOB.currentJob,\r\n    open: state.JOB.addNewDialogState\r\n});\r\nconst mapDispatchToProps = {\r\n    handleClose: () => dispatch => dispatch(closeAddNewJobDialog()),\r\n    handleUpdateJob,\r\n    handleAddJob\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewJobDialogBox);","export const OPEN_ADD_NEW_JOB_DIALOG = \"OPEN ADD NEW JOB DIALOG\";\r\nconst openAddNewJobDialog = () => ({ type: OPEN_ADD_NEW_JOB_DIALOG })\r\nexport default openAddNewJobDialog;","export const SET_SEARCHED_JOBS = \"SET SEARCHED JOBS\";\r\nconst setSearchedJobs = (jobs) => ({ type: SET_SEARCHED_JOBS, payload: jobs })\r\nexport default setSearchedJobs;","import http from '../../util/axios';\r\nconst getSearchedJobs = async (company,query) => {\r\n    try {\r\n        return await http.get(`/service/search?company=${company.name}`, { params: { q: query } })\r\n    } catch (e) {\r\n        return { error: e }\r\n    }\r\n}\r\nexport default getSearchedJobs;","export const SET_JOBS_SEARCHING = \"SET JOBS SEARCHING\";\r\nconst setSearchingJobs = (state) => ({ type: SET_JOBS_SEARCHING, payload: state })\r\nexport default setSearchingJobs;","import React from 'react';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport classes from './header.module.scss';\r\nimport TextField from '@mui/material/TextField';\r\nimport openAddNewJobDialog from '../redux/action/openAddNewJobDialog';\r\nimport { connect } from 'react-redux';\r\nimport handleJobSearch from '../redux/middleware/handleJobSearch'\r\nconst JobHeader = ({ addNew, ...props }) => {\r\n    return (\r\n        <div display=\"flex\" className={classes.wrapper}>\r\n            <h3>Jobs</h3>\r\n            <div className={`${classes.addNewBtn}`}>\r\n                <IconButton onClick={addNew} color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n                    <AddIcon />\r\n                </IconButton>\r\n            </div>\r\n            <TextField onChange={(e)=>props.handleJobSearch(props.company,e.currentTarget.value)} placeholder=\"search\" size=\"small\" variant=\"outlined\" />\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    company:state.COMPANY.currentCompany\r\n})\r\nconst mapDispatchToProps = {\r\n    openAddNewJobDialog: () => dispatch => dispatch(openAddNewJobDialog()),\r\n    handleJobSearch\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(JobHeader);","import setJobErrors from \"../action/setJobError\";\r\nimport setSearchedJobs from \"../action/setSearchedJobs\";\r\nimport getSearchedJobs from \"../../api/getSearchedJobs\";\r\nimport setSearchingJobs from '../action/setSearchingJobs'\r\n\r\nconst handleJobSearch = (company, query) => dispatch => {\r\n    dispatch(setSearchingJobs(true))\r\n    getSearchedJobs(company, query)\r\n        .then(response => {\r\n            let { error, data } = response;\r\n            if (error) return dispatch(setJobErrors(error));\r\n            if (data) return dispatch(setSearchedJobs(data.result));\r\n        })\r\n        .finally(() => {\r\n            dispatch(setSearchingJobs(false))\r\n        })\r\n};\r\n\r\nexport default handleJobSearch;","export const CLOSE_SINGLE_JOB_DIALOG = \"CLOSE SINGLE JOB DIALOG\";\r\nconst closeSingleJobDialog = () => ({ type: CLOSE_SINGLE_JOB_DIALOG })\r\nexport default closeSingleJobDialog;","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport Dialog from '@mui/material/Dialog';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport { connect } from \"react-redux\";\r\nimport closeSingleJobDialog from \"../redux/action/closeSingleJobDialog\";\r\nconst SingleJobDialog = ({ open, handleClose, job, ...props }) => {\r\n    const handleDialogClose = () => {\r\n        handleClose()\r\n    }\r\n    if (!job) return null\r\n    return (\r\n        <Dialog open={open} fullWidth={true} onClose={handleDialogClose}>\r\n            <Box padding=\"30px\">\r\n                <div>\r\n                    <Typography variant=\"overline\" display=\"block\" gutterBottom>Customer name</Typography>\r\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">{job.customerName}</Typography>\r\n                </div>\r\n                <div>\r\n                    <Typography variant=\"overline\" display=\"block\" gutterBottom>Model Number</Typography>\r\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">{job.model}</Typography>\r\n                </div>\r\n                <div>\r\n                    <Typography variant=\"overline\" display=\"block\" gutterBottom>Received Date</Typography>\r\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">{moment(job.receivedDate).format(\"Do MMM YY\")}</Typography>\r\n                </div>\r\n                <div>\r\n                    <Typography variant=\"overline\" display=\"block\" gutterBottom>Returned Date</Typography>\r\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">{moment(job.returnedDate).format(\"Do MMM YY\")}</Typography>\r\n                </div>\r\n                <div>\r\n                    <Typography variant=\"overline\" display=\"block\" gutterBottom>Amount</Typography>\r\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">{job.amount}</Typography>\r\n                </div>\r\n                <div>\r\n                    <Typography variant=\"overline\" display=\"block\" gutterBottom>Description</Typography>\r\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">{job.detailedDescription}</Typography>\r\n                </div>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    open: state.JOB.singleJobDialogState,\r\n    job: state.JOB.currentJob\r\n})\r\nconst mapDispatchToProps = {\r\n    handleClose: () => dispatch => dispatch(closeSingleJobDialog())\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleJobDialog);","import React from 'react';\r\nexport const WindowWidthContext = React.createContext(null);\r\nconst WindowWidthProvider = ({ children }) => {\r\n    const [width, setWidth] = React.useState(null);\r\n    const handleWindowResize = () => setWidth(window.innerWidth)\r\n    React.useEffect(() => {\r\n        handleWindowResize()\r\n        window.addEventListener(\"resize\", handleWindowResize);\r\n        return () => window.removeEventListener(\"resize\", handleWindowResize)\r\n    }, [])\r\n    return (\r\n        <WindowWidthContext.Provider value={{width}}>\r\n            {children}\r\n        </WindowWidthContext.Provider>\r\n    )\r\n}\r\n\r\nexport default WindowWidthProvider;","export const OPEN_UPDATE_JOB_DIALOG = \"OPEN UPDATE JOB DIALOG\";\r\nconst openUpdateJobDialog = (job) => ({ type: OPEN_UPDATE_JOB_DIALOG, payload: job })\r\nexport default openUpdateJobDialog;","export const OPEN_SINGLE_JOB_DIALOG = \"OPEN SINGLE JOB DIALOG\";\r\nconst openSingleJobDialog = (job) => ({ type: OPEN_SINGLE_JOB_DIALOG, payload: job })\r\nexport default openSingleJobDialog;","import http from '../../util/axios';\r\nconst deleteJob = async (company,id) => {\r\n    try {\r\n        return await http.delete(`/service/${id}?company=${company.name}`)\r\n    } catch (e) {\r\n        return { error: e.message }\r\n    }\r\n}\r\n\r\nexport default deleteJob;","import deleteJob from \"../../api/deleteJob\";\r\nimport getJobs from \"../../api/getJobs\";\r\nimport setJobError from \"../action/setJobError\";\r\nimport setJobs from \"../action/setJobs\";\r\nimport startFetchingJobs from \"../action/startJobsFetching\";\r\nimport stopFetchingJobs from \"../action/stopJobsFetching\";\r\nconst handleDeleteJob = (company, id) => async (dispatch) => {\r\n    dispatch(startFetchingJobs())\r\n    let response = await deleteJob(company, id);\r\n    if(response.error) dispatch(setJobError(response.error))\r\n    if (!response.error) {\r\n        let getJobsResponse = await getJobs(company)\r\n        dispatch(setJobs(getJobsResponse.data.result));\r\n    }\r\n    dispatch(stopFetchingJobs())\r\n\r\n}\r\n\r\nexport default handleDeleteJob;","export const INCREASE_JOB_PAGE = \"INCREASE JOB PAGE\";\r\nconst increaseJobPage = currentPage => ({ type: INCREASE_JOB_PAGE, payload: currentPage })\r\nexport default increaseJobPage;","import getJobs from '../../api/getJobs';\r\nimport startFetchingJobs from '../action/startJobsFetching';\r\nimport stopFetchingJobs from '../action/stopJobsFetching';\r\nimport setJobs from '../action/setJobs';\r\nimport setJobError from '../action/setJobError';\r\nimport increaseJobPage from '../action/increareJobPage';\r\n\r\nconst handleNextPage = (company, currentPage, jobs) => async dispatch => {\r\n    // console.log(\"company\",company)\r\n    // console.log(\"current page number\",currentPage)\r\n    // console.log(\"Jobs\",jobs)\r\n    dispatch(startFetchingJobs())\r\n    getJobs(company, { page: currentPage + 1 })\r\n        .then(response => {\r\n            let { error, data } = response;\r\n            if (error) return dispatch(setJobError(error));\r\n            if (data) {\r\n                dispatch(increaseJobPage(currentPage + 1))\r\n                return dispatch(setJobs([...jobs, ...data.result]))\r\n            };\r\n        })\r\n        .finally(() => {\r\n            dispatch(stopFetchingJobs())\r\n        })\r\n\r\n}\r\n\r\nexport default handleNextPage;","import React from 'react';\r\nimport moment from 'moment';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport classes from './table.module.scss';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport LoadingSpinner from '../../shared/LoadingSpinner';\r\nimport { WindowWidthContext } from '../../WindowWidthProvider';\r\nimport { connect } from 'react-redux';\r\nimport openUpdateJobDialog from '../redux/action/openUpdateJobDialog';\r\nimport openSingleJobDialog from '../redux/action/openSingleJobDialog';\r\nimport handleDeleteJob from '../redux/middleware/handleDeleteJob';\r\nimport handleNextPage from '../redux/middleware/handleNextPage';\r\n\r\nclass JobTable extends React.Component {\r\n    static contextType = WindowWidthContext;\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            currentRowEl: null,\r\n            selectedRow: null,\r\n        }\r\n        this.scrollElement = React.createRef(null);\r\n        this.handleOptionClick = this.handleOptionClick.bind(this);\r\n        this.handleView = this.handleView.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n        this.handleOnScrollEnd = this.handleOnScrollEnd.bind(this);\r\n        this.scrollObserver = React.createRef(null);\r\n    }\r\n    componentDidMount() {\r\n        if (this.scrollElement.current) {\r\n            this.scrollObserver.current = new IntersectionObserver((entries) => this.handleOnScrollEnd(entries[0]), { threshold: 1 });\r\n            this.scrollObserver.current.observe(this.scrollElement.current);\r\n        }\r\n    }\r\n    handleOnScrollEnd(entry) {\r\n        // console.log(\"intersecting\", entry.isIntersecting)\r\n        if (entry.isIntersecting && !this.props.isLoading) this.props.handleNextPage(this.props.company, this.props.page, this.props.jobs)\r\n        // if(entry.isIntersecting && !props.isLoading) props.handleNextPage(props.company, props.page, props.jobs)\r\n        // entry.isIntersecting && !props.isLoading && props.handleNextPage(props.company, props.page, props.jobs)\r\n    };\r\n    // const [selectedRow, setSelectedRow] = React.useState(null)\r\n    // const [scrollElement, setScrollElement] = React.useState(null);\r\n    // const { width } = React.useContext(WindowWidthContext);\r\n    // const [currentRowEl, setCurrentRowEl] = React.useState(null);\r\n    handleOptionClick(e, job) {\r\n        this.setState({\r\n            currentRowEl: e.target,\r\n            selectedRow: job\r\n        })\r\n    }\r\n    handleView() {\r\n        this.props.viewSingleJob(this.state.selectedRow)\r\n        this.setState({ currentRowEl: null });\r\n    }\r\n    handleUpdate() {\r\n        this.props.viewUpdateDialog(this.state.selectedRow)\r\n        // props.handleUpdate(selectedRow)\r\n        this.setState({ currentRowEl: null, selectedRow: null });\r\n    }\r\n    handleDelete() {\r\n        this.props.handleDeleteJob(this.props.company, this.state.selectedRow._id)\r\n        this.setState({ currentRowEl: null })\r\n    }\r\n    // React.useEffect(() => scrollElement && scrollObserver.current.observe(scrollElement), [scrollElement]);\r\n    // if (props.isSearching) return <LoadingSpinner />\r\n    render() {\r\n        let { width } = this.context;\r\n        return (\r\n            <>\r\n                <TableContainer className={`${classes.wrapper}`} id=\"table_wrapper\">\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell className={`${classes.cell} ${classes.th}`}>Customer Name</TableCell>\r\n                                {(width > 600) && <TableCell className={`${classes.cell} ${classes.th}`}>Serial Number</TableCell>}\r\n                                {(width > 600) && <TableCell className={`${classes.cell} ${classes.th}`}>Rec Date</TableCell>}\r\n                                {(width > 600) && <TableCell className={`${classes.cell} ${classes.th}`}>Ret Date</TableCell>}\r\n                                {(width > 600) && <TableCell className={`${classes.cell} ${classes.th}`}>Amount</TableCell>}\r\n                                <TableCell className={`${classes.cell} ${classes.th}`}></TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {(this.props.searchedJobs.length ? this.props.searchedJobs : this.props.jobs).map((job) => (\r\n                                <TableRow key={job._id}>\r\n                                    <TableCell className={classes.td} component=\"th\" scope=\"row\">{job.customerName}</TableCell>\r\n                                    {(width > 600) && <TableCell className={`${classes.cell} ${classes.th}`}>{job.serialNumber}</TableCell>}\r\n                                    {(width > 600) && <TableCell className={`${classes.cell} ${classes.th}`}>{moment(job.receivedDate).format(\"Do MMM YY\")}</TableCell>}\r\n                                    {(width > 600) && <TableCell className={`${classes.cell} ${classes.th}`}>{moment(job.returnedDate).format(\"Do MMM YY\")}</TableCell>}\r\n                                    {(width > 600) && <TableCell className={`${classes.cell} ${classes.th}`}>{job.amount}</TableCell>}\r\n                                    <TableCell className={`${classes.td} ${classes.opt_cell}`} component=\"th\" scope=\"row\"><MoreVertIcon onClick={(e) => this.handleOptionClick(e, job)} /></TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                    <div ref={(el) => this.scrollElement.current = el} className={`${classes.loadingWrapper}`}> {this.props.isLoading && <LoadingSpinner />} </div>\r\n                </TableContainer>\r\n\r\n                <Menu\r\n                    id=\"simple-menu\"\r\n                    anchorEl={this.state.currentRowEl}\r\n                    keepMounted\r\n                    open={Boolean(this.state.currentRowEl)}\r\n                    onClose={() => this.setState({ currentRowEl: null })}\r\n                >\r\n                    <MenuItem onClick={this.handleView}>View</MenuItem>\r\n                    <MenuItem onClick={this.handleUpdate}>Update</MenuItem>\r\n                    <MenuItem onClick={this.handleDelete}>Delete</MenuItem>\r\n                </Menu>\r\n            </>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    isSearching: state.JOB.isSearchingJobs,\r\n    isLoading: state.JOB.isFetchingJobs,\r\n    company: state.COMPANY.currentCompany,\r\n    jobs: state.JOB.jobs,\r\n    searchedJobs: state.JOB.searchedJobs,\r\n    page: state.JOB.currentPage\r\n});\r\nconst mapDispatchToProps = {\r\n    viewUpdateDialog: (job) => dispatch => dispatch(openUpdateJobDialog(job)),\r\n    viewSingleJob: (job) => (dispatch) => dispatch(openSingleJobDialog(job)),\r\n    handleDeleteJob,\r\n    handleNextPage\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(JobTable);","export const SINGLE_JOB_DIALOG_STATE = \"SINGLE JOB DIALOG STATE\";\r\nconst changeSingleJobDialogState = (state) => ({ type: SINGLE_JOB_DIALOG_STATE, payload: state })\r\nexport default changeSingleJobDialogState;","import React from 'react';\r\n// import http from '../util/axios';\r\n// import getJobs from './api/getJobs';\r\nimport NewJobDialogBox from '../Job/NewJobDialogBox';\r\n// import { SnackbarContext } from '../shared/SnackbarProvider';\r\nimport JobHeader from './Header';\r\nimport SingleJobDialog from './SingleJobDialog';\r\nimport JobTable from './Table';\r\n// import getSearchedJobs from './api/getSearchedJobs';\r\n// import updateJob from './api/updateJob';\r\n// import addJob from './api/addJob';\r\nimport { connect } from 'react-redux';\r\nimport handleSetJobs from './redux/middleware/handleSetJobs';\r\nimport updateAddNewJobDialogState from './redux/middleware/updateAddNewJobDialogState';\r\nimport handleAddJob from './redux/middleware/handleAddJob';\r\nimport handleUpdateCurrentJob from './redux/middleware/handleUpdateCurrentJob';\r\nimport handleUpdateJob from './redux/middleware/handleUpdateJob';\r\nimport updateSingleJobDialogState from './redux/middleware/updateSingleJobDialogState';\r\n\r\nconst Job = (props) => {\r\n    // console.log(props.isFetchingJobs)\r\n    // const { notify } = React.useContext(SnackbarContext);\r\n    // const [serviceError,     setServiceError] = React.useState(false);\r\n    // const [services, setServices] = React.useState([]);\r\n    // const [searchTerm, setSearchTerm] = React.useState(\"\");\r\n    // const handleSearchInputChange = (e) => setSearchTerm(e.currentTarget.value);\r\n    // const [searchResults, setSearchResults] = React.useState([]);\r\n    // const [isLoading, setIsLoading] = React.useState(false);\r\n    // const [page, setPage] = React.useState(1);\r\n    // const loadMoreJobs = (isLoading) => {\r\n    //     console.log('is loading jobs',isLoading);\r\n        // console.log('load more');\r\n        // console.log(\"Test\");\r\n        //     setPage(currentPage => currentPage + 1)\r\n    // };\r\n    // const [newDialogIsOpen, setNewDialogBoxIsOpen] = React.useState(false)\r\n    // const [singleDialogIsOpen, setSingleDialogBoxIsOpen] = React.useState(false)\r\n    // const handleNewJobDialogClose = () => {\r\n    //     setNewDialogBoxIsOpen(false);\r\n    //     if (isUpdate) setIsUpdate(false)\r\n    // };\r\n    // const handleNewJobDialogOpen = () => setNewDialogBoxIsOpen(true);\r\n    // const handleSingleJobDialogOpen = () => setSingleDialogBoxIsOpen(true);\r\n    // const handleSingleJobDialogClose = () => { setSingleDialogBoxIsOpen(false); currentSelectedJobDetails.current = null; }\r\n    // const currentSelectedJobDetails = React.useRef(null);\r\n    // const handleUpdateJob = (selectedJob) => {\r\n    // props.handleUpdateCurrentJob(selectedJob);\r\n    // props.updateAddNewJobDialogState(true)\r\n    // }\r\n    // const handleViewJob = (selectedJob) => {\r\n    // props.handleUpdateCurrentJob(selectedJob);\r\n    // props.updateSingleJobDialogState(true)\r\n    // }\r\n    // const handleUpdateJob = async (updatedJobDetails) => {\r\n    //     let response = await updateJob(props.company, { ...updatedJobDetails })\r\n    //     if (!response.error) {\r\n    //         handleNewJobDialogClose();\r\n    //         let response = await getJobs(props.company);\r\n    //         setServices(response.data.result);\r\n    //         currentSelectedJobDetails.current = null;\r\n    //     }\r\n    //     return response;\r\n    // }\r\n    // const deleteJob = async () => {\r\n    //     await http.delete(`/service/${currentSelectedJobDetails.current._id}`);\r\n    //     let response = await getJobs(props.company, { limit: (page * 10) })\r\n    //     setServices(response.data.result)\r\n    // }\r\n    // const editJob = () => {\r\n    //     handleNewJobDialogOpen()\r\n    //     setIsUpdate(true)\r\n    // }\r\n    // const handleDeleteJob = () => {\r\n    //     deleteJob();\r\n    // }\r\n    // React.useEffect(() => {\r\n    //     getSearchedJobs(props.company, searchTerm)\r\n    //         .then(response => setSearchResults(response.data.result))\r\n    // }, [searchTerm])\r\n    // React.useEffect(() => {\r\n    //     setIsLoading(true);\r\n    //     getJobs(props.company, { page })\r\n    //         .then(response => {\r\n    //             let { error } = response.data;\r\n    //             if (error) {\r\n    //                 setServiceError(error);\r\n    //                 return notify(error);\r\n    //             } else {\r\n    //                 setIsLoading(false);\r\n    //                 setServices((services) => [...services, ...response.data.result]);\r\n    //             }\r\n\r\n    //         })\r\n    // }, [page])\r\n    React.useEffect(() => {\r\n        if (!props.error && !props.isFetchingJobs && props.jobs.length === 0) props.handleSetJobs(props.company);\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                props.error ? <h1>{props.error}</h1> : (\r\n                    <>\r\n                        <JobHeader\r\n                            addNew={() => props.updateAddNewJobDialogState(true)}\r\n                        // handleSearch={handleSearchInputChange}\r\n                        />\r\n                        {props.jobs.length && \r\n                                <JobTable\r\n                                    // jobs={!!props.searchedJobs.length ? props.searchedJobs : props.jobs}\r\n                                    // selected={currentSelectedJobDetails}\r\n                                    // handleViewJob={handleViewJob}\r\n                                    handleUpdate={handleUpdateJob}\r\n                                    // handleDelete={handleDeleteJob}\r\n                                    // loadMore={loadMoreJobs}\r\n                                />\r\n\r\n                        }\r\n                        <NewJobDialogBox\r\n                        // open={props.addNewDialogState}\r\n                        // handleClose={() => props.updateAddNewJobDialogState(false)}\r\n                        // createJob={(newJob) => props.handleAddJob(props.company, newJob)}\r\n                        // updateJob={(updatedJob) => props.handleUpdateJob(props.company, updatedJob)}\r\n                        // currentJob={props.currentJob}\r\n                        />\r\n\r\n                        <SingleJobDialog\r\n                        // open={props.singleJobDialogState}\r\n                        // handleClose={() => props.updateSingleJobDialogState(false)}\r\n                        // job={props.currentJob}\r\n                        />\r\n                    </>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.JOB,\r\n    company: state.COMPANY.currentCompany\r\n});\r\nconst mapDispatchToProps = {\r\n    handleSetJobs,\r\n    updateAddNewJobDialogState,\r\n    handleAddJob,\r\n    handleUpdateCurrentJob,\r\n    handleUpdateJob,\r\n    updateSingleJobDialogState\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Job);","import getJobs from \"../../api/getJobs\";\r\nimport startFetchingJobs from \"../action/startJobsFetching\";\r\nimport stopFetchingJobs from \"../action/stopJobsFetching\";\r\nimport setJobs from \"../action/setJobs\";\r\nimport setJobError from \"../action/setJobError\";\r\n\r\nconst handleSetJobs = (company,options) => dispatch => {\r\n    dispatch(startFetchingJobs())\r\n    getJobs(company,options)\r\n        .then(response => {\r\n            let { error, data } = response;\r\n            if (error) return dispatch(setJobError(error));\r\n            if (data) return dispatch(setJobs(data.result));\r\n        })\r\n        .finally(() => {\r\n            dispatch(stopFetchingJobs())\r\n        })\r\n};\r\n\r\nexport default handleSetJobs;","import changeAddNewJobDialogState from \"../action/changeAddNewJobDialogState\";\r\nimport updateCurrentJob from \"../action/updateCurrentJob\";\r\nconst updateAddNewJobDialogState = (state) => async (dispatch) => {\r\n    dispatch(changeAddNewJobDialogState(state))\r\n    if(!state) dispatch(updateCurrentJob({}))\r\n};\r\nexport default updateAddNewJobDialogState;","import updateCurrentJob from \"../action/updateCurrentJob\";\r\nconst handleUpdateCurrentJob = (job) => (dispatch) => dispatch(updateCurrentJob(job));\r\nexport default handleUpdateCurrentJob;","import changeSingleJobDialogState from \"../action/changeSingleJobDialogState\";\r\nimport updateCurrentJob from \"../action/updateCurrentJob\";\r\nconst updateSingleJobDialogState = (state) => async (dispatch) => {\r\n    dispatch(changeSingleJobDialogState(state))\r\n    if(!state) dispatch(updateCurrentJob({}))\r\n};\r\nexport default updateSingleJobDialogState;","import Typography from \"@mui/material/Typography\";\r\nimport classes from './profile.module.scss';\r\nconst Profile = () => {\r\n    return (\r\n        <>\r\n            <div>\r\n                <Typography variant=\"h5\">Profile</Typography>\r\n            </div>\r\n            <div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Profile;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Job from '../Job';\r\nimport Profile from '../Profile';\r\nimport classes from './content.module.scss';\r\nconst Content = () => {\r\n    return (\r\n        <div className={`${classes.wrapper} py-md`}>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={Job} />\r\n                <Route exact path=\"/profile\" component={Profile} />\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\nexport default Content;","import Header from '../Header';\r\nimport Sidebar from '../Sidebar';\r\nimport Content from '../Content';\r\nimport React from 'react';\r\nimport { UserContext } from '../UserProvider';\r\nimport { useHistory } from 'react-router';\r\nimport AppProvider from './AppProvider';\r\nimport classes from './app.module.scss';\r\nconst App = () => {\r\n    const { user } = React.useContext(UserContext);\r\n    const history = useHistory()\r\n    React.useEffect(() => { if (!user) history.push('/login') }, [history, user])\r\n    return (\r\n        <AppProvider>\r\n            <Header />\r\n            <div className={`${classes.content_wrapper}`}>\r\n                <Sidebar />\r\n                <Content />\r\n            </div>\r\n        </AppProvider>\r\n    )\r\n}\r\nexport default App;","export default __webpack_public_path__ + \"static/media/logo.c42e8372.svg\";","import React from 'react';\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport http from '../../util/axios';\r\nimport { UserContext } from '../../UserProvider';\r\nimport { useHistory } from 'react-router';\r\nimport classes from './login.module.scss';\r\nimport logo from '../../assets/vectors/logo.svg';\r\nimport { connect } from 'react-redux';\r\nimport handleShowNotification from '../../App/redux/middleware/handleShowNotification';\r\n// import { SnackbarContext } from '../../shared/SnackbarProvider';\r\n\r\nconst Login = (props) => {\r\n    const history = useHistory();\r\n    // const { notify } = React.useContext(SnackbarContext);\r\n    const [username, setUsername] = React.useState('');\r\n    const [password, setPassword] = React.useState('');\r\n    const { user, setUser } = React.useContext(UserContext);\r\n    const login = () => {\r\n        http.post('/user/login', { username, password })\r\n            .then(response => {\r\n                if (response.data.error) props.handleShowNotification(response.data.error)\r\n                !response.data.error && setUser(response.data.user)\r\n            })\r\n    }\r\n    React.useEffect(() => {\r\n        if (user) history.push('/');\r\n    })\r\n    return (\r\n        <Box className={`${classes.main_wrapper} p-md`}>\r\n            <div className={`${classes.brand_wrapper}`}>\r\n                <img src={`${logo}`} alt=\"logo\" />\r\n                <Typography>Catalog</Typography>\r\n            </div>\r\n            <Paper className={classes.wrapper}>\r\n                <TextField\r\n                    size=\"small\"\r\n                    label=\"username\"\r\n                    value={username}\r\n                    variant=\"outlined\"\r\n                    onChange={(e) => setUsername(e.target.value)}\r\n                />\r\n                <TextField\r\n                    size=\"small\"\r\n                    type=\"password\"\r\n                    label=\"password\"\r\n                    value={password}\r\n                    variant=\"outlined\"\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n                <Button variant=\"contained\" onClick={login}>Login</Button>\r\n                <p onClick={() => history.push('/register')}>Register?</p>\r\n            </Paper>\r\n        </Box>\r\n    )\r\n}\r\nconst mapDispatchToProps = { handleShowNotification }\r\nexport default connect(null, mapDispatchToProps)(Login);","import React from 'react';\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport http from '../../util/axios';\r\nimport { UserContext } from '../../UserProvider';\r\nimport { useHistory } from 'react-router';\r\nimport classes from './register.module.scss';\r\nimport logo from '../../assets/vectors/logo.svg';\r\nimport { SnackbarContext } from '../../shared/SnackbarProvider';\r\n\r\nconst Register = () => {\r\n    const history = useHistory();\r\n    const { notify } = React.useContext(SnackbarContext);\r\n    const [firstName, setFirstName] = React.useState(\"\");\r\n    const [firstNameError, setFirstNameError] = React.useState(\"\");\r\n    const handleFirstNameChange = (e) => {\r\n        let value = e.currentTarget.value;\r\n        setFirstName(value);\r\n        (value === \"\") ? setFirstNameError(\"Should not be empty\") : setFirstNameError(\"\")\r\n    }\r\n    const [lastName, setLastName] = React.useState(\"\");\r\n    const [lastNameError, setLastNameError] = React.useState(\"\");\r\n    const handleLastNameChange = (e) => {\r\n        let value = e.currentTarget.value;\r\n        setLastName(value);\r\n        (value === \"\") ? setLastNameError(\"Should not be empty\") : setLastNameError(\"\")\r\n    }\r\n    const [username, setUsername] = React.useState('');\r\n    const [usernameError, setUsernameError] = React.useState(\"\");\r\n    const handleUsernameChange = (e) => {\r\n        let value = e.currentTarget.value;\r\n        setUsername(value);\r\n        setUsername(value);\r\n        (value === \"\") ? setUsernameError(\"Should not be empty\") : setUsernameError(\"\")\r\n    }\r\n    const [password, setPassword] = React.useState('');\r\n    const [passwordError, setPasswordError] = React.useState(\"\");\r\n    const handlePasswordChange = (e) => {\r\n        let value = e.currentTarget.value;\r\n        setPassword(value);\r\n        (value === \"\") ? setPasswordError(\"Should not be empty\") : setPasswordError(\"\")\r\n    }\r\n    const [confirmPassword, setConfirmPassword] = React.useState('');\r\n    const [confirmPasswordError, setConfirmPasswordError] = React.useState(\"\");\r\n    const handleConfirmPasswordChange = (e) => {\r\n        let value = e.currentTarget.value;\r\n        setConfirmPassword(value);\r\n        (value === \"\") ? setConfirmPasswordError(\"Should not be empty\") : setConfirmPasswordError(\"\")\r\n    }\r\n    const { user, setUser } = React.useContext(UserContext);\r\n    const register = () => {\r\n        http.post('/user/register', { firstName, lastName, username, password, confirmPassword })\r\n            .then(response => {\r\n                if (response.data.error) notify(response.data.error)\r\n                !response.data.error && history.push('/login')\r\n            })\r\n    }\r\n    const checkPasswordMatch = () => {\r\n        if ((password !== \"\") || (confirmPassword !== \"\")) {\r\n            if (password !== confirmPassword) {\r\n                setPasswordError(\"Password does not match\")\r\n                setConfirmPasswordError(\"Password does not match\")\r\n            }\r\n            if (password === confirmPassword) {\r\n                if (passwordError === \"Password does not match\") setPasswordError(\"\");\r\n                if (confirmPasswordError === \"Password does not match\") setConfirmPasswordError(\"\");\r\n            }\r\n        }\r\n        if (((password !== \"\") || (confirmPassword !== \"\")) && (password !== confirmPassword)) {\r\n            setPasswordError(\"Password does not match\")\r\n            setConfirmPassword(\"Password does not match\")\r\n        }\r\n    }\r\n    React.useEffect(() => {\r\n        if (user) history.push('/');\r\n    })\r\n    return (\r\n        <Box className={`${classes.main_wrapper} m-md`}>\r\n            <div className={`${classes.brand_wrapper}`}>\r\n                <img src={`${logo}`} alt=\"logo\" />\r\n                <Typography>Catalog</Typography>\r\n            </div>\r\n            <Paper className={classes.wrapper}>\r\n                <TextField\r\n                    error={!!firstNameError}\r\n                    helperText={firstNameError}\r\n                    size=\"small\"\r\n                    label=\"first Name\"\r\n                    value={firstName}\r\n                    variant=\"outlined\"\r\n                    onChange={handleFirstNameChange}\r\n                />\r\n                <TextField\r\n                    error={!!lastNameError}\r\n                    helperText={lastNameError}\r\n                    size=\"small\"\r\n                    label=\"Last Name\"\r\n                    value={lastName}\r\n                    variant=\"outlined\"\r\n                    onChange={handleLastNameChange}\r\n                />\r\n                <TextField\r\n                    error={!!usernameError}\r\n                    helperText={usernameError}\r\n                    size=\"small\"\r\n                    label=\"username\"\r\n                    value={username}\r\n                    variant=\"outlined\"\r\n                    onChange={handleUsernameChange}\r\n                />\r\n                <TextField\r\n                    error={!!passwordError}\r\n                    helperText={passwordError}\r\n                    size=\"small\"\r\n                    type=\"password\"\r\n                    label=\"password\"\r\n                    value={password}\r\n                    variant=\"outlined\"\r\n                    onChange={handlePasswordChange}\r\n                    onBlur={checkPasswordMatch}\r\n                />\r\n                <TextField\r\n                    error={!!confirmPasswordError}\r\n                    helperText={confirmPasswordError}\r\n                    size=\"small\"\r\n                    type=\"password\"\r\n                    label=\"Confirm Password\"\r\n                    value={confirmPassword}\r\n                    variant=\"outlined\"\r\n                    onChange={handleConfirmPasswordChange}\r\n                    onBlur={checkPasswordMatch}\r\n                />\r\n                <Button variant=\"contained\" onClick={register}>Register</Button>\r\n                <p onClick={() => history.push('/login')}>login ?</p>\r\n            </Paper>\r\n        </Box>\r\n    )\r\n}\r\nexport default Register;","import { Switch, Route } from 'react-router-dom'\r\nimport App from \"./App\";\r\nimport Login from \"./user/Login\";\r\nimport Register from './user/Register';\r\n\r\nconst MainRouter = () => {\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/login\" component={Login} />\r\n            <Route exact path=\"/register\" component={Register} />\r\n            <Route path=\"/\" component={App} />\r\n        </Switch>\r\n    )\r\n}\r\nexport default MainRouter;","import { createTheme } from '@mui/material/styles';\r\nimport { blue } from '@mui/material/colors'\r\nexport default createTheme({\r\n  typography: {\r\n    fontFamily: ['Open Sans'].join(','),\r\n  },\r\n  palette: {\r\n    primary: {\r\n      main: blue[800],\r\n    },\r\n    secondary: {\r\n      main: '#edf2ff',\r\n    },\r\n  },\r\n});","import ThemeProvider from '@mui/material/styles/ThemeProvider';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport theme from './theme';\r\nconst MaterialThemeProvider = ({ children }) => {\r\n    return <ThemeProvider theme={theme}><CssBaseline />{children}</ThemeProvider>\r\n}\r\n\r\nexport default MaterialThemeProvider","import { Helmet,HelmetProvider } from \"react-helmet-async\";\r\nconst HeadProvider = ({children}) => {\r\n    return (\r\n        <HelmetProvider>\r\n                <Helmet>\r\n                    <title>Catalog</title>\r\n                </Helmet>\r\n                {children}\r\n        </HelmetProvider>\r\n    )\r\n}\r\nexport default HeadProvider;","import { CHANGE_ADD_NEW_DIALOG_STATE } from './action/changeAddNewJobDialogState';\r\nimport { SET_JOB_ERROR } from './action/setJobError';\r\nimport { SET_JOBS } from \"./action/setJobs\";\r\nimport { START_JOBS_FETCHING } from \"./action/startJobsFetching\";\r\nimport { STOP_JOBS_FETCHING } from \"./action/stopJobsFetching\";\r\nimport { UPDATE_CURRENT_JOB } from './action/updateCurrentJob';\r\nimport { SET_SEARCHED_JOBS } from './action/setSearchedJobs'\r\nimport { SINGLE_JOB_DIALOG_STATE } from './action/changeSingleJobDialogState';\r\nimport { OPEN_SINGLE_JOB_DIALOG } from './action/openSingleJobDialog';\r\nimport { CLOSE_SINGLE_JOB_DIALOG } from './action/closeSingleJobDialog';\r\nimport { OPEN_UPDATE_JOB_DIALOG } from './action/openUpdateJobDialog';\r\nimport { CLOSE_ADD_NEW_JOB_DIALOG } from './action/closeAddNewJobDialog';\r\nimport { OPEN_ADD_NEW_JOB_DIALOG } from './action/openAddNewJobDialog';\r\nimport { SET_JOBS_SEARCHING } from './action/setSearchingJobs';\r\nimport { INCREASE_JOB_PAGE } from './action/increareJobPage';\r\n\r\nconst initialState = {\r\n    isFetchingJobs: false,\r\n    jobs: [],\r\n    currentJob: null,\r\n    error: \"\",\r\n    addNewDialogState: false,\r\n    singleJobDialogState: false,\r\n    searchedJobs: [],\r\n    isSearchingJobs: false,\r\n    currentPage: 1\r\n}\r\nconst jobReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case START_JOBS_FETCHING:\r\n            return { ...state, isFetchingJobs: true }\r\n        case STOP_JOBS_FETCHING:\r\n            return { ...state, isFetchingJobs: false }\r\n        case SET_JOBS_SEARCHING:\r\n            return { ...state, isSearchingJobs: action.payload }\r\n        case SET_JOBS:\r\n            return { ...state, jobs: action.payload }\r\n        case SET_SEARCHED_JOBS:\r\n            return { ...state, searchedJobs: action.payload }\r\n        case UPDATE_CURRENT_JOB:\r\n            return { ...state, currentJob: action.payload }\r\n        case SET_JOB_ERROR:\r\n            return { ...state, }\r\n        case CHANGE_ADD_NEW_DIALOG_STATE:\r\n            return { ...state, addNewDialogState: action.payload }\r\n        case OPEN_ADD_NEW_JOB_DIALOG:\r\n            return { ...state, currentJob: null, addNewDialogState: false }\r\n        case SINGLE_JOB_DIALOG_STATE:\r\n            return { ...state, singleJobDialogState: action.payload }\r\n        case OPEN_SINGLE_JOB_DIALOG:\r\n            return { ...state, currentJob: action.payload, singleJobDialogState: true }\r\n        case CLOSE_SINGLE_JOB_DIALOG:\r\n            return { ...state, currentJob: null, singleJobDialogState: false }\r\n        case OPEN_UPDATE_JOB_DIALOG:\r\n            return { ...state, currentJob: action.payload, addNewDialogState: true }\r\n        case CLOSE_ADD_NEW_JOB_DIALOG:\r\n            return { ...state, currentJob: null, addNewDialogState: false }\r\n        case INCREASE_JOB_PAGE:\r\n            return { ...state, currentPage: action.payload }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default jobReducer;","export const SET_COMPANY = \"SET COMPANY\";\r\nconst setCompanies = (companies) => ({ type: SET_COMPANY, payload: companies })\r\nexport default setCompanies;","import { SET_COMPANY } from \"./actions/setCompanies\";\r\nimport { SET_CURRENT_COMPANY } from \"./actions/setCurrentCompany\";\r\nimport { SET_COMPANY_ERROR } from \"./actions/setCompanyError\";\r\nimport { START_COMPANY_FETCHING } from \"./actions/startFetchingCompany\";\r\nimport { STOP_COMPANY_FETCHING } from \"./actions/stopFetchingCompany\";\r\nimport { SET_SEARCHING_COMPANIES } from \"./actions/setIsSearchingCompanies\";\r\nimport { SET_IS_CREATING_COMPANY } from \"./actions/setIsCreatingCompany\";\r\nimport { SET_SEARCHED_COMPANIES } from \"./actions/setSearchedCompanies\";\r\n\r\nconst initialState = {\r\n    isFetchingCompanies: false,\r\n    companies: [],\r\n    searchedCompanies: [],\r\n    currentCompany: null,\r\n    isSearchingCompanies: false,\r\n    error: \"\",\r\n    isCreatingCompany: false,\r\n    companyCreationError: null\r\n}\r\nconst companyReducer = (state = initialState, actions) => {\r\n    switch (actions.type) {\r\n        case START_COMPANY_FETCHING:\r\n            return { ...state, isFetchingCompanies: true }\r\n        case STOP_COMPANY_FETCHING:\r\n            return { ...state, isFetchingCompanies: false }\r\n        case SET_COMPANY:\r\n            return { ...state, companies: actions.payload }\r\n        case SET_COMPANY_ERROR:\r\n            return { ...state, error: actions.payload }\r\n        case SET_CURRENT_COMPANY:\r\n            return { ...state, currentCompany: actions.payload }\r\n        case SET_SEARCHING_COMPANIES:\r\n            return { ...state, isSearchingCompanies: actions.payload }\r\n        case SET_SEARCHED_COMPANIES:\r\n            return { ...state, searchedCompanies: actions.payload }\r\n        case SET_IS_CREATING_COMPANY:\r\n            return { ...state, isCreatingCompany: actions.payload }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default companyReducer;","export const CLOSE_SIDEBAR = \"CLOSE SIDEBAR\";\r\nconst closeSidebar = () => ({ type: CLOSE_SIDEBAR })\r\nexport default closeSidebar;","export const OPEN_SIDEBAR = \"OPEN SIDEBAR\";\r\nconst openSidebar = () => ({ type: OPEN_SIDEBAR })\r\nexport default openSidebar;","import { CLOSE_SIDEBAR } from \"./action/clsoeSidebar\";\r\nimport { OPEN_SIDEBAR } from \"./action/openSidebar\";\r\nimport { SET_NOTIFICATION } from \"./action/setNotification\";\r\n\r\nconst initialState = {\r\n    sideBarIsOpen: false,\r\n    notification: null\r\n}\r\nconst AppReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case OPEN_SIDEBAR:\r\n            return { ...state, sideBarIsOpen: true }\r\n        case CLOSE_SIDEBAR:\r\n            return { ...state, sideBarIsOpen: false }\r\n        case SET_NOTIFICATION:\r\n            return { ...state, notification: action.payload }\r\n        default:\r\n            return { ...state }\r\n    }\r\n}\r\n\r\nexport default AppReducer;","import { combineReducers } from \"redux\";\r\nimport jobReducer from \"../Job/redux/reducer\";\r\nimport companyReducer from \"../company/redux/reducer\";\r\nimport AppReducer from \"../App/redux/reducer\";\r\nconst rootReducer = combineReducers({\r\n    JOB: jobReducer,\r\n    COMPANY: companyReducer,\r\n    APP:AppReducer\r\n})\r\n\r\nexport default rootReducer;","import { applyMiddleware, createStore } from \"redux\";\r\nimport rootReducer from \"./rootReducer\";\r\nimport thunk from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nconst logger = createLogger({ level: 'log' })\r\nconst middlewares = [ thunk,logger ];\r\nexport default createStore(rootReducer, applyMiddleware(...middlewares))","import { Provider } from \"react-redux\";\r\nimport store from './store';\r\nconst ReduxProvider = ({ children }) => {\r\n    return <Provider store={store}>\r\n        {children}\r\n    </Provider>\r\n}\r\n\r\nexport default ReduxProvider;","import SnackbarProvider from './shared/SnackbarProvider';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport MainRouter from './route';\r\nimport UserProvider from './UserProvider/index';\r\nimport MaterialThemeProvider from './MaterialThemeProvider'\r\nimport HeadProvider from './HeadProvider';\r\nimport WindowWidthProvider from './WindowWidthProvider';\r\nimport ReduxProvider from './redux';\r\nimport CompanyProvider from './company/provider';\r\nfunction Root() {\r\n  return (\r\n    <>\r\n      <ReduxProvider>\r\n        <WindowWidthProvider>\r\n          <HeadProvider />\r\n          <MaterialThemeProvider>\r\n            <SnackbarProvider>\r\n              <UserProvider>\r\n                  <BrowserRouter>\r\n                    <MainRouter />\r\n                  </BrowserRouter>\r\n              </UserProvider>\r\n            </SnackbarProvider>\r\n          </MaterialThemeProvider>\r\n        </WindowWidthProvider>\r\n      </ReduxProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Root;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport './index.scss';\r\nimport ReactDOM from 'react-dom';\r\nimport Root from './Root';\r\nimport reportWebVitals from './reportWebVitals';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Root />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_wrapper\":\"companySelectDialog_main_wrapper__22zT7\",\"card_wrapper\":\"companySelectDialog_card_wrapper__9IyMh\",\"action_wrapper\":\"companySelectDialog_action_wrapper__MncD4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_wrapper\":\"createCompanyDialog_main_wrapper__1hvjS\",\"card_wrapper\":\"createCompanyDialog_card_wrapper__UUBuZ\",\"action_wrapper\":\"createCompanyDialog_action_wrapper__3zaTI\"};"],"sourceRoot":""}